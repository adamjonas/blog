<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: react | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/react/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-04-19T15:39:00-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intro to React]]></title>
    <link href="http://adamjonas.com/blog/intro-to-react/"/>
    <updated>2017-04-07T11:30:00-04:00</updated>
    <id>http://adamjonas.com/blog/intro-to-react</id>
    <content type="html"><![CDATA[<h2>React event</h2>

<ul>
<li>similar to normal <a href="https://facebook.github.io/react/docs/handling-events.html">event handling</a> (responds to target and such, but has other properties)</li>
</ul>


<h2>Refs and the Dom</h2>

<ul>
<li><a href="https://facebook.github.io/react/docs/refs-and-the-dom.html">ref documentation</a></li>
</ul>


<h2>Props</h2>

<ul>
<li>They are the mechanism used in React for passing data from parent to child components</li>
<li>Props can’t be changed from inside the component; they are passed and “owned” by the parent.</li>
</ul>


<h2>State</h2>

<ul>
<li>React’s components can have mutable data inside this.state.</li>
<li>when the state is updated, the component triggers the reactive rendering, and the component itself and its children will be re-rendered. As mentioned, this happens very quickly due to React’s use of a virtual DOM.</li>
</ul>


<h2>Component to action to store</h2>

<ul>
<li> the store is subscribed to the action</li>
<li> components subscribed to stores -> re-render</li>
<li><p> props are immutible -> given the state of the application, what doe the component look like?</p></li>
<li><p>?what is the value of the actions step -> ususually just passing through to the store</p></li>
<li><p>user inputs triggers the action</p></li>
<li>inputs into the system -> actions</li>
<li>action updates the state</li>
<li><p>which updates the components</p></li>
<li><p>store is more flexibile than backbone collections and models</p></li>
<li>based on the change what literal DOM manipulations are needed -> taken care of virtual DOM</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react]]></title>
    <link href="http://adamjonas.com/blog/react/"/>
    <updated>2016-03-10T14:43:00-05:00</updated>
    <id>http://adamjonas.com/blog/react</id>
    <content type="html"><![CDATA[<h2>What is it?</h2>

<ul>
<li>beefed up view layer</li>
<li>one way data binding -> if state changes the view changes</li>
<li>creates a virtual DOM</li>
<li>doesn't provide any data management systems like backbone, Alt.js, Redux</li>
<li>no ajax, use JQuery</li>
<li>no routing capabilities</li>
<li>does not work well with JQuery DOM manipulation</li>
<li>can re-render a lot because of the virtual DOM manipulation</li>
</ul>


<h2>Setup</h2>

<ul>
<li>Babel</li>
<li>Gulp - task runner like rake</li>
<li>Webpack - processes through Babel interpreter and make it useable code</li>
</ul>


<h2>Quirks</h2>

<ul>
<li>class becomes className since it is a reserved word</li>
<li>typeSetting</li>
</ul>


<h2>Going forwards</h2>

<ul>
<li>flux

<ul>
<li>alt.js</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
