<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/notes/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-03-10T19:46:15-05:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Patterns of Enterprise Application Architecture]]></title>
    <link href="http://adamjonas.com/blog/patterns-of-enterprise-application-architecture/"/>
    <updated>2016-05-30T17:08:00-04:00</updated>
    <id>http://adamjonas.com/blog/patterns-of-enterprise-application-architecture</id>
    <content type="html"><![CDATA[<h2>Introduction:</h2>

<blockquote><p>“Architecture” is a term that lots of people try to define, with little agree- ment. There are two common elements: One is the highest-level breakdown of a system into its parts; the other, decisions that are hard to change. It’s also increasingly realized that there isn’t just one way to state a system’s architec- ture; rather, there are multiple architectures in a system, and the view of what is architecturally significant is one that can change over a system’s lifetime. p. 1.</p>

<p>The subjectivity comes in here as well because, if you find that something is easier to change than you once thought, then it’s no longer architectural. In the end architecture boils down to the important stuff—whatever that is. p. 2</p>

<p><em>Responsiveness</em> is about how quickly the system acknowledges a request as opposed to processing it. This is important in many systems because users may become frustrated if a system has low responsiveness, even if its response time is good. If your system waits during the whole request, then your responsiveness and response time are the same. However, if you indicate that you’ve received the request before you complete, then your responsiveness is better. Providing a progress bar during a file copy improves the responsiveness of your user inter- face, even though it doesn’t improve response time. p. 7</p></blockquote>

<h3>Patterns</h3>

<blockquote><p>There’s no generally accepted definition of a pattern, but perhaps the best place to start is Christopher Alexander, an inspiration for many pattern enthusi- asts: “Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice” [Alexander et al.]. Alexander is an architect, so he was talking about buildings, but the definition works pretty nicely for software as well. The focus of the pattern is a particular solution, one that’s both com- mon and effective in dealing with one or more recurring problems. Another way of looking at it is that a pattern is a chunk of advice and the art of creating patterns is to divide up many pieces of advice into relatively independent chunks so that you can refer to them and discuss them more or less separately. p. 9</p></blockquote>

<h2>Making a choice</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing Object-Oriented Software, Guided By Tests]]></title>
    <link href="http://adamjonas.com/blog/growing-object-oriented-software-guided-by-tests/"/>
    <updated>2016-05-28T16:51:00-04:00</updated>
    <id>http://adamjonas.com/blog/growing-object-oriented-software-guided-by-tests</id>
    <content type="html"><![CDATA[<h2>Object-Oriented Style</h2>

<blockquote><p>We value code that is easy to maintain over code that is easy to write. Implementing a feature in the most direct way can damage the maintainability of the system, for example by making the code difficult to understand or by introducing hidden dependencies between components. Balancing immediate and longer-term concerns is often tricky, but we’ve seen too many teams that can no longer deliver because their system is too brittle. p. 47</p>

<p>Encapsulation and Information Hiding
  We want to be careful with the distinction between "encapsulation" and "information
hiding." The terms are often used interchangeably but actually refer to two separate,
and largely orthogonal, qualities:
  Encapsulation
  Ensures that the behavior of an object can only be affected through its API.It lets us control how much a change to one object will impact other parts of the system by ensuring that there are no unexpected dependencies between
unrelated components.</p></blockquote>

<p>  Information hiding
  Conceals how an object implements its functionality behind the abstraction of its API. It lets us work with higher abstractions by ignoring lower-level details that are unrelated to the task at hand. p. 49</p>

<blockquote><p>Our heuristic is that we should be able to describe what an object does without using any conjunctions (“and,” “or”). If we find ourselves adding clauses to the description, then the object probably should be broken up into collaborating objects, usually one for each clause. p. 52</p></blockquote>

<p>Context Independence</p>

<blockquote><p>While the “composite simpler than the sum of its parts” rule helps us decide whether an object hides enough information, the “context independence” rule helps us decide whether an object hides too much or hides the wrong information. p.54</p></blockquote>

<h2>Achieving Object-Oriented Design</h2>

<blockquote><p>Interface and Protocol
Steve heard this useful distinction in a conference talk: an interface describes whether two components will fit together, while a protocol describes whether they <strong>will work</strong> together. p. 58</p>

<p>Kernighan and Plauger attribute the idea of pipes to Douglas McIlroy, who wrote a memo in 1964 suggesting the metaphor of data passing through a segmented garden hose. It’s currently available at <a href="ttp://plan9.bell-labs.com/who/dmr/mdmpipe.pdf">http://plan9.bell-labs.com/who/dmr/mdmpipe.pdf</a>. p. 66</p></blockquote>

<h2>The Sniper Makes a Bid</h2>

<blockquote><p>Defer Decisions
There’s a technique we’ve used a couple of times now, which is to introduce a null implementation of a method (or even a type) to get us through the next step. This helps us focus on the immediate task without getting dragged into thinking about the next significant chunk of functionality. The null Auction, for example, allowed us to plug in a new relationship we’d discovered in a unit test without getting pulled into messaging issues. That, in turn, meant we could stop and think about the dependencies between our objects without the pressure of having a broken compilation. p. 136</p>

<p><strong>When the facts change, I change my mind. What do you do, sir?</strong>
  —John Maynard Keynes p. 172</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The tap method]]></title>
    <link href="http://adamjonas.com/blog/the-tap-method/"/>
    <updated>2012-07-02T10:52:00-04:00</updated>
    <id>http://adamjonas.com/blog/the-tap-method</id>
    <content type="html"><![CDATA[<p>I haven't found great explanations for this yet but there is a video below... prety much the tap method allows you to initialize methods right off the bat.</p>

<p>The tap method is available to all Ruby objects and serves as a way to have a block "act on" the method's caller and return the object called. Per the Ruby docs, "the primary purpose of this method is to 'tap into' a method chain, in order to perform operations on intermediate results within the chain". For some examples on using tap see MenTaLguY's post on Eavesdropping on Expressions. As he says in his post, "you can insert your code just about anywhere without disturbing the flow of data."</p>

<p>I'm having some trouble following all this... Matt Stopa has a video below that is more for a beginner.</p>

<p><a href="http://www.youtube.com/watch?v=QAJMxBkYaUQ">The video is here</a></p>
]]></content>
  </entry>
  
</feed>
