<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-03-10T09:33:24-05:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Bits 2]]></title>
    <link href="http://adamjonas.com/blog/ruby-bits-2/"/>
    <updated>2012-12-20T12:39:00-05:00</updated>
    <id>http://adamjonas.com/blog/ruby-bits-2</id>
    <content type="html"><![CDATA[<p>```ruby Multiple Lambdas
def exec_game(name, action, error_handler)</p>

<pre><code>game = games.detect { |game| game.name = name }
begin
  action.call(game)
rescue
  error_handler.call
end
</code></pre>

<p>  end
```</p>

<p><code>ruby Lambda or Proc to Block
library = Library.new(GAMES)
printer = lambda { |game| puts "#{game.name} (#{game.system}) - #{game.year}" }
library.each(&amp;printer)
</code></p>

<p><em>Calling a method with &amp; in front of a parameter</em>
<code>tweets.each(&amp;printer)</code></p>

<p><em>Defining a method with &amp; in front of a parameter</em>
<code>def each(&amp;block)</code></p>

<p>```ruby Passing blocks around...
  def each</p>

<pre><code>games.each do |game|
  yield game
end
</code></pre>

<p>  end</p>

<h1>refactored as</h1>

<p>  def each(&amp;block)</p>

<pre><code>games.each(&amp;block)
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Dispatching &amp; Send]]></title>
    <link href="http://adamjonas.com/blog/dynamic-dispatching-and-send/"/>
    <updated>2012-10-29T15:32:00-04:00</updated>
    <id>http://adamjonas.com/blog/dynamic-dispatching-and-send</id>
    <content type="html"><![CDATA[<p>Given a file with...
<code>
admin : Bill
title : Rubyland
topic : Ruby and more
</code>
You could build a method that maps the keys and values with dynamic dispatching...
```ruby</p>

<h1>Load configuration if any</h1>

<p>if conf.rc and File.exists?( conf.rc )
  YAML.load_file(conf.rc).each do |k,v|</p>

<pre><code>conf.send("#{k}=", v) #the beauty of dynamic dispatching in motion
</code></pre>

<p>  end
end
```
(this e.g. is from page 68 of the Prag Programmer's Metapramming Book)</p>

<p>```ruby This code needs to be much more DRY
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
</code></pre>

<p>  end</p>

<p>  def mouse</p>

<pre><code>info = @data_source.get_mouse_info(@id)
price = @data_source.get_mouse_price(@id)
result = "Mouse: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  def cpu</p>

<pre><code>info = @data_source.get_cpu_info(@id)
price = @data_source.get_cpu_price(@id)
result = "Cpu: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  def keyboard</p>

<pre><code>info = @data_source.get_keyboard_info(@id)
price = @data_source.get_keyboard_price(@id)
result = "Keyboard: #{info} ($#{price})"
return "* #{result}" if price &gt;= 100
result
</code></pre>

<p>  end</p>

<p>  # ...
end
```</p>

<p>This is much cleaner
```ruby Refactored with simple interpolation
class Computer
  def initialize(computer_id, data_source)</p>

<pre><code>@id = computer_id
@data_source = data_source
</code></pre>

<p>  end</p>

<p>  def self.define_component(name)</p>

<pre><code>define_method(name) do
  info = @data_source.send "get_#{name}_info", @id
  price = @data_source.send "get_#{name}_price", @id
  result = "#{name.to_s.capitalize}: #{info} ($#{price})"
  return "* #{result}" if price &gt;= 100
  result
end
</code></pre>

<p>  end</p>

<p>  define_component :mouse
  define_component :cpu
  define_component :keyboard
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ternary Operator]]></title>
    <link href="http://adamjonas.com/blog/ternary-operator/"/>
    <updated>2012-10-29T14:21:00-04:00</updated>
    <id>http://adamjonas.com/blog/ternary-operator</id>
    <content type="html"><![CDATA[<p>Ternary operators are simply a short form of an if-else statement in one line.</p>

<p>As a concise alternative to simple if/else statements we can use the conditional or ternary ?: operator. It is the only ternary operator (three operands) in Ruby. It has the following basic structure:</p>

<p><code>(condition) ? (result if condition is true) : (result if condition is false)</code></p>

<p>The following sample will print “The variable is 10″ if var is equal to 10. Otherwise it will print “The variable is Not 10″.
<code>ruby An example
print “The variable is ” + (var == 10 ? “10″ : “Not 10″)
</code>
Ruby evaluates the expression to the left of the question mark. If that expression is true then it returns the expression between the question mark and the colon, if the expression is false, it returns what comes after the colon.
```ruby Ternary Operator
age = 15</p>

<h1>will output teenager</h1>

<p>puts (13...19).include?(age) ? "teenager" : "not a teenager"</p>

<h1>can also do assignment</h1>

<p>age = 23
person = (13...19).include?(age) ? "teenager" : "not a teenager"
puts person # => "not a teenager"
```</p>

<p>The part before the question mark is the "if condition". the part behind it is the code to be run if the condition matches. the ":" respresents "else", and the code behind it the code to be run if the condition does not maztch.</p>

<p>```ruby Ternary Operator in the view</p>

<h3>Name:</h3>


<p>&lt;% if @user.name %>
&lt;%= @user.name %>
&lt;% else %>
<em>[no name set]</em>
&lt;% end %></p>

<h1>can be refactored as</h1>

<h3>Name:</h3>


<p>&lt;%= @user.name ? @user.name : "<em>[no name set]</em>" %>
```</p>

<ul>
<li>Reading:

<ul>
<li><a href="http://rubylearning.com/satishtalim/simple_constructs.html">Ruby Learning</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day7]]></title>
    <link href="http://adamjonas.com/blog/fis-day7/"/>
    <updated>2012-10-12T09:46:00-04:00</updated>
    <id>http://adamjonas.com/blog/fis-day7</id>
    <content type="html"><![CDATA[<p>So this was on hacknews, but I thought this article was awesome: [Why the laptop has such a hard time catching on].(http://www.theatlantic.com/technology/archive/2012/09/why-the-first-laptop-had-such-a-hard-time-catching-on-hint-sexism/262220/)</p>

<h2>Beauty in code</h2>

<p><em>pythagoras</em>: beauty in numbers. He found the blacksmith's sounds of hammers were beautiful. It was based on the proportion of the hammers-- ended up being the basis of music theory. The ratios were also integrated into Greek Architecture.</p>

<p><em>Thomas Aquinas</em></p>

<ol>
<li>proportion</li>
<li>integrity (also have to be able to do the job they need to do and do it well)</li>
<li>Clarity (simplicity and clear)</li>
</ol>


<p>There is a balance between these three points:
if a command triggers something very powerful it violates the clarity requirement because so much is happening under the hood.</p>

<p>"Goodness is beauty in action"
It just so happens that learning how to write software better, happen to comply with the characteristics of beauty.</p>

<p>Elegance is about restraint</p>

<p>One isn't perfect and the other isn't wrong-- it's the tension between opposing sides is what makes it work. (think ying/yang &amp; star wars)</p>

<h2>Programmer of the Day</h2>

<p><em>Larry Wall:</em></p>

<ul>
<li>inventor of perl</li>
<li>optimized for human read-ability and not performance</li>
<li>modernists believe in a OR b, post-modern believe in AND ~> polymorphic interfaces</li>
</ul>


<p>Programming Virtues:</p>

<ul>
<li>laziness: build a script because we won't accept the long process of manual task</li>
<li>impatient: things that are slow, you just won't use</li>
<li>hubris: Belief in yourself to tackle a problem that no one else thinks is possible.</li>
</ul>


<h3>rsync</h3>

<p>How to move lots of files around. For moving files or music to a server since mac osx is so terrible at moving files.</p>

<h1>Ruby</h1>

<p><em>case statements</em> AKA switch it</p>

<p>case y #the condition you want to compare it against
when 3
when 2,4</p>

<p>just like y ===3
y===2 || y ===4</p>

<p>integers are immutable (so are booleans, nil, and symbols)</p>

<p><strong><em>When you have multiple branches of an if statement and you are comparing multiple values, then a case statement is probably more appropriate</em></strong></p>

<p>If statement is for controlling flow and when is for switching state.</p>

<p>?? Need to understand state</p>

<p><a href="http://worrydream.com">Brett Victor</a>.</p>

<h3>While</h3>

<p>is a ruby keyword. It's a construct, not a method.
<code>ruby While e.g.
while x&lt;10
 puts x
 x+=1
end
</code></p>

<p>```ruby building each with while
array = [1,2,3,4,5]</p>

<p>array_length = array.length
i = 0</p>

<p>def each(array, &amp;block)</p>

<pre><code>while i &lt; array_length
    yield array[i]
    i +=1
end
</code></pre>

<p>end</p>

<p>colors = ["red", "yellow", "green"]</p>

<p>each(colors) do |color|</p>

<pre><code>puts color
</code></pre>

<p>end
```</p>

<p>??I'm not getting yield</p>

<p>[array][-1] -> called a negative index</p>

<p>literal constructors</p>

<ul>
<li>[1,2,nil, nil,5]</li>
<li>""</li>
<li>{}</li>
<li>// -> regex</li>
</ul>


<p>Stopping a loop:</p>

<ul>
<li>the break keyword will exit the current loop.</li>
<li>return will break the loop but also return the value</li>
<li>next</li>
</ul>


<p>```ruby next keyword
["Billy"].each do |i|</p>

<pre><code>next if i == "Billy"
</code></pre>

<p>end</p>

<p>"a".next #=> "b"
```</p>

<p>shout.upcase -> dot notation</p>

<p>```ruby ||=
x ||= 1 #is the same as</p>

<p>if x.nil?</p>

<pre><code>x = 1
</code></pre>

<p>else</p>

<pre><code>x
</code></pre>

<p>end
```</p>

<p>```ruby Helpful methods...
.insert(position, 'insertion')
"find the w".index("w") #=> 9</p>

<p>.scan #=> returns all the matches
.match #=> returns the first it finds
```</p>

<p>?? slug def
space is considered empty?</p>

<h3>&amp;&amp; vs and</h3>

<ul>
<li>use and for joining routines</li>
<li>use &amp;&amp; for conditions</li>
</ul>


<h3>Scope</h3>

<ul>
<li>something is in scope when the context it which it was defined and used is the same</li>
</ul>


<p>scope gates: anytime when you change the scope</p>

<p>blocks are scope gates. blocks have shared scope. If defined outside the block it is accessible in the block. Whatever is defined within the block is NOT accessible outside the block.</p>

<p>Methods have exclusive scope gates: are very strict. Parameters are the way to pass in info into a method.</p>

<p>You wouldn't be able to reuse variables if you didn't have scope...</p>

<h3>Hashes</h3>

<p><code>ruby New Notation
{hello: "World"} #=&gt; {:hello =&gt; "World"}
</code></p>

<p>Can use anything has a key
weird_hash {</p>

<pre><code>[0]=&gt; "an array",
1=&gt; "number one"
"1"=&gt; "string one"
</code></pre>

<p>}
weird_hash[[0]]
weird_hash[1]
weird_hash["1"]</p>

<p><strong>variables are just pointers they are things</strong></p>

<p>we use symbols because they are immutible</p>

<ul>
<li>Nesting
In general, we don't need to go 3 levels deep.</li>
</ul>


<p><strong>Garbage collection refers to the ability to let go of memory</strong></p>

<p>When you iterate over over a hash you need to think of the :key=>value pair as one unit. Seperating doesn't make sense.</p>

<p>```ruby
alphabet = {:a => 1, :b => 2}
alphabet.each do |arr|</p>

<pre><code>arr #=&gt; [:a,1] [:a,2]
</code></pre>

<p>end
```</p>

<h3>Useful methods on arrays</h3>

<ul>
<li>.compact -> remove all nil values</li>
<li>.uniq -> uniq values only</li>
<li>.flatten -> will remove nesting from an array</li>
<li>.join() -> join with a delimiter</li>
<li>.reverse</li>
<li>.reverse!</li>
<li>.insert</li>
<li>.pop() -> the argument it accepts is number of values it pops</li>
<li>.shift -> the reverse of pop - removes the first element</li>
<li><em>.pop is to shift was unshift is to push</em></li>
<li>.slice -> does not modify the original</li>
<li>.delete() -> index position and return the value</li>
<li>.index() -> position</li>
</ul>


<p>puts method.inspect is similar to print</p>

<p><em>pop is to shift was unshift is to push</em>
<a href="https://speakerdeck.com/u/mordaroso/p/dci-and-ruby">DCI presentationn</a></p>

<p><a href="https://speakerdeck.com/u/mattyoho/p/exploiting-the-resource-idiom">resource idiom</a></p>

<p><a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-ruby-could-do">10 Things You Didn't Know Ruby Could do</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[inject]]></title>
    <link href="http://adamjonas.com/blog/inject/"/>
    <updated>2012-10-07T11:33:00-04:00</updated>
    <id>http://adamjonas.com/blog/inject</id>
    <content type="html"><![CDATA[<p>Learning inject has been on my TODO list for a while...</p>

<p>I want to use inject anytime I am building an object a piece at a time. In the case of summing, creating a hash, or an array I'm building a result by applying changes based on the elements of the enumerable.</p>

<p>```ruby Examples
total_visits = stats.inject(0) {|sum, stat| sum = stat.visit_count}</p>

<h1>just for fun let's sum all the numbers from 1 to, oh, say a million</h1>

<p>sum = (1..1000000).inject(0){|cummulative,n| cummulative+n}
puts sum   =>500000500000</p>

<h1>you can do interesting things like build hashes</h1>

<p>primes = [1,3,5,7,11,13]
hash = primes.inject({}) { |s,e| s.merge( { e.to_s => e } ) }
p hash  #   =>  {"11"=>11, "7"=>7, "13"=>13, "1"=>1, "3"=>3, "5"=>5}
```</p>

<p>Reading:
<a href="http://blog.jayfields.com/2008/03/ruby-inject.html">The inject method</a>
<a href="http://www.fincher.org/tips/Languages/Ruby/">Code e.g. - #21e</a>
<a href="http://teachmetocode.com/screencasts/rubys-enumerable-module-the-inject-method/">Charles Max Wood Video</a>
<a href="http://blog.teamtreehouse.com/ruby-arrays">Treehouse explains the inject method</a></p>
]]></content>
  </entry>
  
</feed>
