<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Hack hack hack...]]></title>
  <link href="http://adamjonas.github.com/adamjonas/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://adamjonas.github.com/adamjonas/"/>
  <updated>2015-08-26T16:53:08-04:00</updated>
  <id>http://adamjonas.github.com/adamjonas/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[js promises]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/js-promises/"/>
    <updated>2015-08-20T16:35:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/js-promises</id>
    <content type="html"><![CDATA[<p>promises make asych code more readable and bring back the value of a return value as opposed to calling nested callback functions.</p>

<p><a href="http://stackoverflow.com/questions/23951745/is-any-jquery-version-compliant-to-promise-a-specifications">jquery isn't up to spec for promises</a> but jquery 3.0 is.</p>

<p>Josh's prefered promise lib is <a href="https://github.com/cujojs/when">when.js</a></p>

<p><a href="http://ajaxpatterns.org/">Ajax patterns</a> is interesting reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node, express, backbone and marionette -- sorting out the pieces]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/node-express-backbone-marionette-sorting-out-the-pieces/"/>
    <updated>2014-01-10T17:47:00-05:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/node-express-backbone-marionette-sorting-out-the-pieces</id>
    <content type="html"><![CDATA[<h3>Express with Node</h3>

<ul>
<li>Express is a framework that takes Node from a barebones application and turns it into something that behaves more like the web servers we're all used to working with.</li>
<li>Express feels like the <a href="http://www.sinatrarb.com/">sinatra</a> of node.</li>
</ul>


<h3>Bower vs. npm</h3>

<ul>
<li>It was advised that bower is the front end dependencies package manager, where the npm is for the backend. <a href="https://www.google.com/search?q=npm+of+backend+and+bower+for+the+front+end&amp;oq=npm+of+backend+and+bower+for+the+front+end&amp;aqs=chrome..69i57.8637j0j9&amp;sourceid=chrome&amp;espv=210&amp;es_sm=91&amp;ie=UTF-8#es_sm=91&amp;espv=210&amp;q=npm+for+backend+and+bower+for+the+front+end">see</a></li>
<li>You specify what dir your want to install the bower packages with a <code>.bowerrc</code> file which goes in the project root. Here are <a href="https://gist.github.com/facultymatt/5482781">some examples</a> of these types of files.

<ul>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/a-requirejs-backbone-and-bower-starter-template/">This tutorial</a> was helpful to get up and running with require.js and bower</li>
</ul>
</li>
</ul>


<h3>Mean stack</h3>

<ul>
<li><a href="http://mean.io/">Mean.io</a></li>
<li>Really like this <a href="http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/">tutorial here</a></li>
</ul>


<h3>Asynchronous Module Definition</h3>

<ul>
<li>The AMD format comes from wanting a module format that was better than today's "write a bunch of script tags with implicit dependencies that you have to manually order" and something that was easy to use directly in the browser. <a href="http://requirejs.org/docs/whyamd.html">further reading</a></li>
<li>The standard loader is <a href="http://requirejs.org/">RequireJS</a>, but in production you could use a replacement AMD loader called <a href="https://github.com/jrburke/almond">Almond</a>. It is a smaller "shim" loader, providing the minimal AMD API footprint that includes loader plugin support. Some developers like to use the AMD API to code modular JavaScript, but after doing an optimized build, they do not want to include a full AMD loader like RequireJS, since they do not need all that functionality. Some use cases, like mobile, are very sensitive to file sizes. By including almond in the built file, there is no need for RequireJS. almond is around 1 kilobyte when minified with Closure Compiler and gzipped.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[asynch js]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/asynch-js/"/>
    <updated>2013-12-04T10:52:00-05:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/asynch-js</id>
    <content type="html"><![CDATA[<h3>Asynch</h3>

<ul>
<li>Async is a tool for your Javascript utility belt that helps you out with the asynchronous tasks

<ul>
<li><a href="https://github.com/caolan/async">asynch.js</a></li>
</ul>
</li>
</ul>


<h3>Promises</h3>

<ul>
<li><a href="http://net.tutsplus.com/tutorials/javascript-ajax/wrangle-async-tasks-with-jquery-promises/">Wrangle Async Tasks With JQuery Promises</a></li>
<li><a href="http://blog.parse.com/2013/01/29/whats-so-great-about-javascript-promises/">What’s so great about JavaScript Promises?</a></li>
</ul>


<h3>Reading</h3>

<ul>
<li><a href="http://javascriptplayground.com/blog/2013/06/think-async/">think asynch</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Context and functions in Javascript]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/context-and-functions-in-javascript/"/>
    <updated>2013-11-19T17:55:00-05:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/context-and-functions-in-javascript</id>
    <content type="html"><![CDATA[<p>Bind and fat arrow result in something similar but with different implementations.</p>

<pre><code>fn = -&gt; console.log @
ctx = {foo: 'bar', fn: -&gt; console.log(@)}
pusher.execute('event_name', ctx.fn.bind(ctx))
</code></pre>

<p>In most cases, the context of the function (also known as <code>@</code>) is based on the receiver. In this contrived example, to execute the function on the pusher object, we might pass in the function name and then the callback function. When we call a function to an outside source, we have no idea in what context it might be executed. In our case, <code>ctx.fn</code> and <code>@fn</code> might be the exact same -- these are just references to how to call the function, but an important takeaway is that these do not pass determine the context. To ensure the context, one must specify it with the bind function. <code>pusher.execute('event_name', ctx.fn.bind(ctx))</code> is essentially equal to <code>pusher.execute('event_name', @fn.bind(ctx))</code>. The receiver in this case doesn't matter.</p>

<p>JS OOP isn't a joy ride. Oh well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doug Crockfords Javascript Lectures]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/doug-crockfords-javascript-lectures/"/>
    <updated>2013-02-02T19:38:00-05:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/doug-crockfords-javascript-lectures</id>
    <content type="html"><![CDATA[<p>Thomas Edison was the first person to reference a bug. Grace Hopper actually found a moth in her machine.</p>

<p>The prototype model is poorly named but you can build enormously complext object-oriented systems. You don't need classes.</p>

<p>Javascript inherited aspects of java, scheme, and self. The bad parts of js were mostly a function of being built in haste-- it was created by netscape in 10 days.</p>

<ul>
<li>Object have prototype properties:

<ul>
<li><code>Object.getPrototype(object)</code> copies the object, something they did have befor</li>
<li><p><code>Object.create(object, properties)</code> -> creates a new object</p></li>
<li><p>Crockford doesn't use Object.new rather he thinks prototypally, so he uses <code>Object.create</code></p></li>
<li><code>Object.create(null)</code> can take null as a parameter so you get a pristine object</li>
<li>the enumerator is exposed so you can set it as true or false.</li>
<li>keys must be strings</li>
<li><p>can find if an object is extensible and you can set it to not extensible with <code>Object.preventExtensible</code>, <code>Object.seal</code> and <code>Object.freeze</code> -> immuatble objects</p></li>
<li><p>There is only one number type in JS. Memory is no longer a problem. So why create smaller types of numbers? In JS they didn't. Prevents a whole class of errors.</p></li>
<li>Associateive law does not hold. (41 min)

<ul>
<li>decimal fractions are approximate ->  So if A, B, and C are 0.1 + 0.2. + 0.3, they do not associate. This is a real problem because the world works on the decimal system. Especially money.

<ul>
<li>to solve, turn them into integers. e.g. with money, work in cents.</li>
</ul>
</li>
</ul>
</li>
<li>All numbers inherit from the <code>number.prototype</code>.</li>
<li>numbers are first class objects-> a number can be stored as a var, can be passed in a param, can be returned as a function, can be stored as an object (java cannot do this)</li>
<li>Math function should be part of number, but they aren't</li>
<li><p>Nan, not a number, but it is a number. You don't get back an exception with bad math, you get a bad value.</p>

<ul>
<li>NaN is not equal to NaN, but NaN === NaN is true. This is appaling.</li>
</ul>
</li>
<li><p>Boolean</p></li>
<li><p><strong>Strings</strong> -> no one knows why they are called strings.</p>

<ul>
<li>JavaScript tolerates the surrogate characters but has no knowledge of them, so if you have a string containing one surrogate character, JavaScript thinks it is a string with two characters in it. The counts will be wrong and you've got to be really careful when you do your substring operations because you donít want to split those things.</li>
<li>strings are frozen.</li>
<li>similar strings are equal (===)</li>
<li>no type char, an individual character is just a short string</li>
<li>string literals can use single or double quotes with \ escapements</li>
<li>can convert a number to string with <code>str = num.toString();</code> or <code>str = String(num);</code> except the first will throw an exception for null or undefined</li>
<li>convert a string to num with <code>num = Number(str)</code> or <code>num = +str</code></li>
<li>parseInt(str, 10), converts the value into a number. It stops at the first non-digit character.

<ul>
<li><code>parseInt("12em") === 12</code></li>
<li>The radix(10) should always be used

<ul>
<li><code>parseInt("08") === 0</code></li>
<li><code>parseInt("08", 10) === 8</code></li>
</ul>
</li>
<li>(56 min) string</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
