<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: codeschool | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/codeschool/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2016-05-03T10:10:40-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Bits 2]]></title>
    <link href="http://adamjonas.com/blog/ruby-bits-2/"/>
    <updated>2012-12-20T12:39:00-05:00</updated>
    <id>http://adamjonas.com/blog/ruby-bits-2</id>
    <content type="html"><![CDATA[<p>```ruby Multiple Lambdas
def exec_game(name, action, error_handler)</p>

<pre><code>game = games.detect { |game| game.name = name }
begin
  action.call(game)
rescue
  error_handler.call
end
</code></pre>

<p>  end
```</p>

<p><code>ruby Lambda or Proc to Block
library = Library.new(GAMES)
printer = lambda { |game| puts "#{game.name} (#{game.system}) - #{game.year}" }
library.each(&amp;printer)
</code></p>

<p><em>Calling a method with &amp; in front of a parameter</em>
<code>tweets.each(&amp;printer)</code></p>

<p><em>Defining a method with &amp; in front of a parameter</em>
<code>def each(&amp;block)</code></p>

<p>```ruby Passing blocks around...
  def each</p>

<pre><code>games.each do |game|
  yield game
end
</code></pre>

<p>  end</p>

<h1>refactored as</h1>

<p>  def each(&amp;block)</p>

<pre><code>games.each(&amp;block)
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Unit Testing]]></title>
    <link href="http://adamjonas.com/blog/rails-unit-testing/"/>
    <updated>2012-09-24T13:20:00-04:00</updated>
    <id>http://adamjonas.com/blog/rails-unit-testing</id>
    <content type="html"><![CDATA[<h3>Rails Testing</h3>

<ul>
<li>Verification Testing</li>
<li>Test First</li>
<li>Test Driven Design</li>
</ul>


<h3>Unit Testing</h3>

<ul>
<li>Piecing of our applications in isolation from other parts</li>
<li>Easy to debug</li>
<li>Leads to good documentation</li>
</ul>


<p>WHY TEST::UNIT rather than RSPEC
- More basic testing library and what rails uses by default
- similar to other testing libraries from other languages</p>

<p><code>ruby Assert List
assert &lt;conditional&gt;
assert_equal &lt;expected&gt;, &lt;actual&gt;
assert_not_equal
assert_respond_to &lt;object&gt;, :&lt;method&gt;
assert_nil &lt;object&gt;
assert_not_nil &lt;object&gt;
assert_match &lt;pattern&gt;, &lt;string&gt;
assert_no_match &lt;pattern&gt;, &lt;string&gt;
assert_raise(&lt;error&gt;) { &lt;code to raise error&gt; }
assert_kind_of(&lt;Class&gt;, &lt;object&gt;)
</code></p>

<p>```ruby
<subject>_test.rb</p>

<p>require "test/unit"</p>

<p>class <Subject>Test &lt; Test::Unit::TestCase</p>

<pre><code>def test_&lt;what_we_are_testing&gt;
    &lt;assertion&gt;
end
</code></pre>

<p>end</p>

<h1>E.g.</h1>

<p>require "test/unit"</p>

<p>class BooleanTest &lt; Test::Unit::TestCase</p>

<pre><code>def test_true_is_true
#the 2nd parameter is puts on failure.
    assert true, "True should be truthy"
end
</code></pre>

<p>end</p>

<h1>another e.g.</h1>

<p>require 'test/unit'</p>

<p>class ConditionalTest &lt; Test::Unit::TestCase
  def test_one_is_greater_than_one</p>

<pre><code>assert 1 &gt; 0, "One is not greater than zero"
</code></pre>

<p>  end
end</p>

<h1>e.g.</h1>

<p>class MultipleTest &lt; Test::Unit::TestCase
  def test_multiple_of</p>

<pre><code>assert Multiple.multiple_of?(10, 5), "10 should be a multiple of 5"
</code></pre>

<p>  end
end
```</p>

<p><em>The best tests have one assertion.</em></p>

<h3>Red, Green, Refactor</h3>

<ol>
<li>Red: Write a failing test</li>
<li>Green: Write enough code to make it pass</li>
<li>Refactor: Refactor your code</li>
</ol>


<p>```ruby assert_respond_to
def test_humanize_function_added_to_string</p>

<h1>assert_respond_to <object>, &lt;:method></h1>

<p>  assert_respond_to "blah", :humanize
end
```</p>

<p>```ruby Assert_match
class ZombifierTest &lt; Test::Unit::TestCase
  def test_zombify_brains</p>

<pre><code>z = Zombifier.new('I love your arms')
#assert_match &lt;regex&gt;, &lt;string&gt;
assert_match /brains/, z.zombify.humanize
</code></pre>

<p>  end
end
```</p>

<p>```ruby
class ZombifierTest &lt; Test::Unit::TestCase
  def test_zombify_upcase</p>

<pre><code>z = Zombifier.new("Hello world").zombify
#assert_equal "&lt;expected string&gt;", "&lt;actual string&gt;"
assert_equal "HELLO WORLD BRAINS", z
</code></pre>

<p>  end
end
```</p>

<p>```ruby assert_raise
  #assert_raise(RuntimeError) { "zombie".humanize }
class ZombifierTest &lt; Test::Unit::TestCase
  def test_brains_in_zombify_raises_error</p>

<pre><code>z = Zombifier.new('BRAINS')
assert_raise(RuntimeError) { z.zombify }
</code></pre>

<p>  end
end
```</p>

<p>```ruby
class ZombifierTest &lt; Test::Unit::TestCase
  def test_zombify_returns_a_string</p>

<pre><code>z = Zombifier.new('I like knees')
</code></pre>

<p>   #assert_kind_of(<Class>, <object>)</p>

<pre><code>assert_kind_of(String, z.zombify)
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Bits]]></title>
    <link href="http://adamjonas.com/blog/ruby-bits/"/>
    <updated>2012-09-06T15:33:00-04:00</updated>
    <id>http://adamjonas.com/blog/ruby-bits</id>
    <content type="html"><![CDATA[<p>||= Assigns if there is not existing value. Otherwise, the previous assigment will override it.
Good way to set defaults if you need them</p>

<p>```ruby Refactoring using ||=
options[:country] = 'us' if options[:country].nil?</p>

<h1>can refactor as</h1>

<p>options[:country] ||= 'us'
```</p>

<p>```ruby Case statement e.g.
def search(games, search_term)
  search_index = case games.find_index(search_term)</p>

<pre><code>  when search_index
     "Game #{search_term} found: #{games[search_index]} at index #{search_index}."
   else
    "Game #{search_term} not found."
  end
</code></pre>

<p>end
games = ["Super Mario Bros.", "Contra", "Metroid", "Mega Man 2"]
puts search(games, "Contra")
```</p>

<p>```ruby Options
def new_game(name, options= {})
  {</p>

<pre><code>name: name,
year: options[:year],
system: options[:system]
</code></pre>

<p>  }
end
game = new_game("Street Figher II",
 year: 1992,
 system: "SNES"
 )
```</p>

<p>rindex- Returns the index of the last occurrence of the given substring or pattern (regexp) in str. Returns nil if not found. If the second parameter is present, it specifies the position in the string to end the searchâ€”characters beyond this point will not be considered.</p>

<p>private methods: all private methods are not accessible for outside objects</p>

<p>```ruby Raising Exceptions
class InvalidGameError &lt; StandardError; end
def new_game(name, options={})
  raise InvalidGameError if name.nil?
  {</p>

<pre><code>name: name,
year: options[:year],
system: options[:system]
</code></pre>

<p>  }
end
begin
  game = new_game(nil)
rescue InvalidGameError => e
  puts "There was a problem creating your new game: #{e.message}"
end
```</p>

<p>```ruby splat arguments
def describe_favorites(*games)
  for game in games</p>

<pre><code>puts "Favorite Game: #{game}"
</code></pre>

<p>  end<br/>
end
describe_favorites('Mario', 'Contra', 'Metroid')
```</p>

<p>```ruby Classes
class Game
  def initialize(name, options={})</p>

<pre><code>@name = name
@system = options[:system]
@year = options[:year]
</code></pre>

<p>  end
end
```</p>

<h3>Encapsulation</h3>

<p>Passing around data and numbers breaks encapsulation
If all you are passing around is data- then an options hash should suffice</p>

<h3>Private / Protected Methods</h3>

<p>Private methods in Ruby cannot be called with an explicit receiver.
```ruby Private
def up_vote(friend)</p>

<h1>in this case, bump karma is private</h1>

<pre><code>bump_karma
#below will error out
friend.bump_karma
</code></pre>

<p>end
```</p>

<p>Protected methods in Ruby CAN be called with an explicit receiver, but not outside the class.
```ruby Protected
def up_vote(friend)</p>

<h1>in this case, bump karma is private</h1>

<pre><code>bump_karma
#below will error out
friend.bump_karma
</code></pre>

<p>end
```</p>

<h3>Inheritance / Super</h3>

<p>A way to DRY up duplication is to use inheritance ot inherit behavior for two classes</p>

<p>Super looks for definitions in the parent class and applies it in the child class</p>

<h3>Active Support</h3>

<p>```ruby
def anniversary(game, years)
  game[:release].advance(years: years)
end</p>

<p>game = {
  name: 'Contra',
  release: DateTime.new(1987, 2, 20, 0, 0, 0)
}
puts anniversary(game, 20)
```</p>

<p>```ruby difference between hashes</p>

<h1>Using ActiveSupport, return the difference between Mario's favorite games and Luigis's favorite games by implementing the difference_between method.</h1>

<p>def difference_between(player1, player2)
  player1.diff(player2)
end
```</p>

<p>when you include something. it is included in the ancestor's class.</p>

<h3>Namespacing</h3>

<p>putting functions in a module will prevent namespacing conflicts
a common pattern is to 'include' the module inside of the class... this will expose the module methods as instances methods in the object -- which means the methods will have access to the object's internal properties.</p>

<p>when use mixin versus classical class inheritance.
A class can only have one super class
inheritance suggests specialization</p>

<p>the extends keyword included as the class methods</p>

<p>use extend to expose class methods as class methods
use include to expose class methods as instance methods</p>

<p>if you call extend on an object, then it exposes the methods as instance methods on an object</p>

<p>```ruby object extend
game = Game.new("Contra")</p>

<h1>extend the Playable module for the specific game object</h1>

<h1>the module is not available to other objects in that class</h1>

<p>game.extend(Playable)
game.play
```</p>

<p>method hooks allows you to both include and extend modules</p>

<p>```ruby
module LibraryUtils</p>

<p>  def add_game(game)
  end</p>

<p>  def remove_game(game)
  end</p>

<h1>this extends the ClassMethods so that it doesn't need to be called below</h1>

<p>  def self.included(base)</p>

<pre><code>base.extend(ClassMethods)
</code></pre>

<p>  end</p>

<p>  module ClassMethods</p>

<pre><code>def search_by_game_name(name)
end
</code></pre>

<p>  end
end</p>

<p>class AtariLibrary
  include LibraryUtils
  #see-- no extend but still includes the class methods module...
end
```</p>

<h3>Active Support Concern</h3>

<p>this allows us to use the include and extend calls without making it so ugly.</p>

<p>```ruby ActiveSupport Concern
require 'active_support/concern'</p>

<p>module LibraryUtils</p>

<h1>this ensures that the dependencies are properly resolved...</h1>

<p>  extend ActiveSupport::Concern</p>

<p>  def add_game(game)
  end</p>

<p>  def remove_game(game)
  end</p>

<p>  module ClassMethods</p>

<pre><code>def search_by_game_name(name)
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby ActiveSupport Concern
module LibraryLoader</p>

<p>  module ClassMethods</p>

<pre><code>def load_game_list
end
</code></pre>

<p>  end
end</p>

<p>module LibraryUtils</p>

<p>  extend ActiveSupport::Concern</p>

<p>  #included block below is much cleaner
  included do</p>

<pre><code>load_game_list
</code></pre>

<p>  end
end</p>

<p>class AtariLibrary
  include LibraryUtils
end
```
Some more in depth reading to understand this better...
<a href="http://yehudakatz.com/2009/11/12/better-ruby-idioms/">here is an explanation from yehuda katz</a></p>

<p><a href="http://www.fakingfantastic.com/2010/09/20/concerning-yourself-with-active-support-concern/">Concerning Yourself with ActiveSupport::Concern</a></p>

<p>From 2010- <a href="http://www.strictlyuntyped.com/2010/05/tweaking-on-rails-30-2.html">Tweaking on Rails 3.0: #2 ActiveSupport::Concern</a></p>

<h3>Blocks</h3>

<p>```ruby Yields
class Library
  attr_accessor :games</p>

<p>  def initialize(games = [])</p>

<pre><code>self.games = games
</code></pre>

<p>  end</p>

<p>  def each_on_system(system)</p>

<pre><code>games.each do |game| 
#'yield game'yields the game object
  yield game if game.system == system
end
</code></pre>

<p>  end
end
```</p>

<p>```ruby Yields
  def list</p>

<pre><code>games.each do |game|
  puts yield game
end
</code></pre>

<p>  end
```</p>

<p>```ruby
class Game
  attr_accessor :name, :year, :system
  attr_reader :created_at</p>

<p>  def initialize(name, options={})</p>

<pre><code>self.name = name
self.year = options[:year]
self.system = options[:system]
@created_at = Time.now
</code></pre>

<p>  end</p>

<p>  def play</p>

<pre><code>emulate do |emulator|
  emulator.play(self)
end
</code></pre>

<p>  end</p>

<p>  def screenshot</p>

<pre><code>emulate do |emulator|
  emulator.start(self) 
  emulator.screenshot
end
</code></pre>

<p>  end</p>

<p>private</p>

<p>def emulate
  begin
  emulator = Emulator.new(system)
  yield emulator</p>

<pre><code>rescue Exception =&gt; e
  puts "Emulator failed: #{e}"
</code></pre>

<p>  end
end
end
```</p>
]]></content>
  </entry>
  
</feed>
