<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-04-19T15:39:00-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Grape Api]]></title>
    <link href="http://adamjonas.com/blog/grape-api/"/>
    <updated>2013-11-11T15:13:00-05:00</updated>
    <id>http://adamjonas.com/blog/grape-api</id>
    <content type="html"><![CDATA[<h2><a href="https://github.com/intridea/grape">Grape</a></h2>

<ul>
<li>Grape is a REST-like API micro-framework for Ruby. It's designed to run on Rack or complement existing web application frameworks such as Rails and Sinatra by providing a simple DSL to easily develop RESTful APIs.</li>
<li>Here is a nice <a href="http://www.slideshare.net/yorzi/rapid-rubyapiongrape-8674582">slide share</a> of the API possibilities (though it is from 2011).</li>
<li><a href="http://joeybeninghove.com/2012/01/21/grape-apis-few-quick-tidbits/">some tips here</a></li>
</ul>


<h3>Rack::Cors</h3>

<ul>
<li>Rack::Cors provides support for Cross-Origin Resource Sharing (CORS) for Rack compatible web applications. The CORS spec allows web applications to make cross domain AJAX calls without using workarounds such as JSONP.</li>
<li><a href="http://www.nczonline.net/blog/2010/05/25/cross-domain-ajax-with-cross-origin-resource-sharing/">explaination worth reading</a></li>
</ul>


<h3>Trouble with protected_attributes</h3>

<ul>
<li>rails 4 -- learned via <a href="https://github.com/rails/rails/issues/12360">issue 12360</a> that protected_attr needs to be up to date. In my case, v 1.0.5.</li>
</ul>


<h3>Rack Console</h3>

<ul>
<li>used gem <a href="https://github.com/sickill/racksh"><code>racksh</code></a> for a rack console. Pretty dandy.</li>
</ul>


<h3>Mind f<sup>ck</sup></h3>

<ul>
<li><a href="https://github.com/rosenfeld/active_record_migrations">active_record_migrations</a> worked when vendored locally, but the config options were not configuring anything when remote.

<ul>
<li>went hunting in <a href="https://github.com/rails/rails/tree/master/activerecord">active_record</a> (specifically in the <a href="https://github.com/rails/rails/blob/d8b173607da94419e841c4d36f251987c9acf156/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb">postgres adapter</a>, but didn't find anything to solve the problem. Some <a href="https://github.com/rails/rails/blob/d8b173607da94419e841c4d36f251987c9acf156/activerecord/lib/active_record/connection_adapters/postgresql_adapter.rb#L390">cool datatypes</a> in there though.</li>
</ul>
</li>
<li>ended up using the <code>DATABASE_URL</code> env instead of database.yml to configure the postgres DB.</li>
</ul>

]]></content>
  </entry>
  
</feed>
