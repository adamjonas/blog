<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: forms | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/forms/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-03-31T11:46:07-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Forms]]></title>
    <link href="http://adamjonas.com/blog/forms/"/>
    <updated>2012-08-14T10:49:00-04:00</updated>
    <id>http://adamjonas.com/blog/forms</id>
    <content type="html"><![CDATA[<h3>Forms</h3>

<p>forms are a collection of elements
text element cant live by itself
the entire sign up for needs to be submitted to one place
group form elements together and you wrap them in a form</p>

<p>where its going has nothing to do with the information that it is passing in</p>

<p>every web request as a request and a response
a request has to go somewhere-- that's urls-- that's the address
forms pass along data for where we are going-- go here and tell the server this</p>

<p><a href="htmlhttp://www.w3schools.com/tags/tag_input.asp">Input tags</a></p>

<p><strong><em>the name in the form is the key of the params hash</em></strong>
```</p>

<h1>The html</h1>

<p><input type="text", name="tag"></p>

<h1>in the controller</h1>

<p>@airbrake_error.add_tags(params[:tag])
```</p>

<p>```ruby</p>

<h1>if the form contains</h1>

<p>&lt;%= text_field_tag(:query) %></p>

<h1>then you would be able to get the value of this field in the controller with params[:query].</h1>

<p>```</p>

<ul>
<li><p>text_field_tag :name of the tag and then the prefilled value</p></li>
<li><p>f.text_field :comments is NESTED in airbrake error which is represented by f</p></li>
<li><p>The form doesn't need a name-- it is the wrapper. The input elements DO need names.</p></li>
</ul>


<p><a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions">Understanding naming parameter conventions</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day3]]></title>
    <link href="http://adamjonas.com/blog/haw-day3/"/>
    <updated>2012-08-02T10:55:00-04:00</updated>
    <id>http://adamjonas.com/blog/haw-day3</id>
    <content type="html"><![CDATA[<p>Rolled back git using the sha</p>

<p>used the fresh method to collect the fresh errors in an array. then we used the flatten method to un-nest the array to acccess the objects.</p>

<p>changed the interface to show the airbrake IDs so that we can differentiate the errors with the same name</p>

<p>p291
form_tag issues an HTTP request that replaces all the content in the browser.
form_remote_tag issues an HTTP request, but processes the results with JavaScript
rather than having the browser render them directly.</p>

<p>nav
filtering
all errors inbox
checkboxes(which don't work but do display) - have the route for signal</p>

<p>event driven programming</p>

<p>dom fields</p>

<p>cmd option i - to open the</p>

<p>collect all values
submit the request, submit the values manually
raise params.inspect</p>

<p>GOAL OF THE IMPORTER:
import a new set of airbrake errors</p>

<p>if the id is NOT uniq then update the attributes but do not display or save in mongoid memory</p>

<p>identify what is uniq with the present method
if uniq ignore
if NOT uniq then update attributes
makes sure the newly imported error will not save --> validation should take care of this</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day2]]></title>
    <link href="http://adamjonas.com/blog/haw-day2/"/>
    <updated>2012-08-01T11:31:00-04:00</updated>
    <id>http://adamjonas.com/blog/haw-day2</id>
    <content type="html"><![CDATA[<p>builder pattern versus the inheritance pattern</p>

<p>no diff between slugs and permalinks</p>

<p>To install a gem from a fork
<code>
gem 'rails', :git =&gt; 'git://github.com/rails/rails.git'
</code></p>

<p>add validation to prevent slug nil</p>

<p>```
git reset --hard HEAD</p>

<h1>could also reset to a specific point in time</h1>

<p>git reset --hard <sha>
```
HEAD is the current version</p>

<p>delete local branch:
```
git branch -d initial-error-tagging</p>

<h1>to delete the remote...</h1>

<p>â™• git push origin :initial-error-tagging
```</p>

<p>GOALS:
1. normalize the tag_names DONE</p>

<ol>
<li>should be able to mark the error as ignore and rerun the importer and when it's reimported it should still be marked as ignored....</li>
<li>inbox not show you errors with tag ignore</li>
<li>if we reimport these errors they need to maintain their tags (is this )
does the count update?</li>
</ol>


<p> look into scopes-- need to filter ignore off the index
read about named scopes on mongoid
http://mongoid.org/en/mongoid/docs/querying.html#scoping
desired code</p>

<p>```ruby
errors.not_ignored</p>

<h1>or better yet</h1>

<p>errors.fresh # => to get a list of errors that haven't been ignored.
```</p>

<ol>
<li>li needs to build a show page of each error's attributes</li>
</ol>


<p>NOTES:
Scoping - so scoping is like a filter
<a href="http://mongoid.org/en/mongoid/docs/querying.html#scoping">Mongoid scoping macro</a></p>

<p><code>ruby Filtering/Scope
Tag.not_in(:name =&gt; "fresh").includes(:airbrake_errors).collect{|t| t.airbrake_errors}
</code>
Autocomplete for tags:
<a href="http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid">http://www.dwellable.com/blog/Tech-Autocomplete-with-Rails-Mongoid</a></p>

<p><a href="http://railsforum.com/viewtopic.php?id=2151">Select all checkboxes</a>
<a href="http://www.rorexperts.com/select-and-unselect-all-checkboxes-by-selecting-single-check-t1614.html">or</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lecture 5- Rails]]></title>
    <link href="http://adamjonas.com/blog/lecture-5-rails/"/>
    <updated>2012-07-22T14:18:00-04:00</updated>
    <id>http://adamjonas.com/blog/lecture-5-rails</id>
    <content type="html"><![CDATA[<p>HOMEWORK:</p>

<p>In the migration:
``` ruby In the migration
def change
  add_column :songs, :album_id, :integer</p>

<h1>should probably make the below code in the rake tasks (in seed/tasks)</h1>

<p>  songs = Song.all</p>

<p>  songs.each do |s|</p>

<pre><code>album= Album.find_or_create_by_name(s.album_name.string)
#update those songs to relate to that album
puts "UPdating song #{s.id} to album #{album.id}..."
s.album= album
s.save
</code></pre>

<p>  end
  remove_column :songs, :album_name
 end
end
```</p>

<p>Some other methods:</p>

<p>find_each method: look it up in guides <a href="http://guides.rubyonrails.org/active_record_querying.html">here</a>.
find_each yields each individual object one at a time
find_in_batches it yields songs</p>

<p>in the seeds file:
``` ruby Examples
aretha = Song.create :name => "Aretha Franklin"
respect = aretha.songs.build :name => "Respect"
aretha.save</p>

<h1>many to one, the reverse of above</h1>

<p>monster = Song.create :name => "Monster"
monster.build_artist name => "Kanye West"
monster.save</p>

<p>aretha.songs &lt;&lt; Song.new(:name => "Natural Woman")</p>

<h1>unintentional performance issue here because it loads the full array</h1>

<h1>in order to push one song into it</h1>

<p>kanye = Artist.find_by_name => "Kanye West"
kanye.songs &lt;&lt; Song.new(:name => "Home")</p>

<p>michael = Artist.create :name => "Michael Jackson"</p>

<p>michael.songs &lt;&lt; ("Black and white", "Thriller", "beat it").collect do |song_name|</p>

<h1>need collect instead of each method b/c need the return</h1>

<p>  song.create :name => song_name
end</p>

<p>michael.songs.delete(Song.find_by_name("Black and white", "Thriller", "beat it"))
end
```</p>

<p>This will output the log output of the rake tasks:
<code>
tail -f log/development.log
</code></p>

<p>update the forms in the application (2:50)</p>

<p>Shortcut: cmd D shortcut to highlight similar words to edit</p>

<p>errors:
when you get a stack trace and it's part of rails you can ignore it because you created the file NOT rails.</p>

<h3>has_many :through</h3>

<p>(2:58)
artists have many albums through their songs
- a many to many association</p>

<p>if a model has 2 :belongs_to associations means that it is a join table
even though it is a join model is has all the same behaviors as a has_many assoc</p>

<p>INNER JOIN is SQL:
The INNER JOIN keyword return rows when there is at least one match in both tables.</p>

<h3>Foreign Key/ belongs_to RULE</h3>

<p>if it belongs_to xyz it is a foreign key. if it is a foreign key than it belongs_to xyz.</p>

<p>``` ruby Seeds File from the lab
  avi = User.create :name => "Avi"
  favorites = Mixtape.create :name => "Avi's favs"</p>

<p>  avi.mixtapes &lt;&lt; favorites</p>

<p>  black_and_white = michael.songs.first
  black_and_white.genres.build #when it's a many it is genres.build
  #singular is build_genre
  black_and_white.save</p>

<p>  favorites.songs &lt;&lt; black_and_white
  favorites.mixtape_songs.build :song => Song.find_by_name("Thriller")
  #(4:34)
  #if you understand :belongs_to and has_many it doesn't matter if it's a :through</p>

<p>  UserMixtape.create(</p>

<pre><code>:user =&gt; User.create(:name =&gt; "Roland"),
:mixtape =&gt; favorites
)
</code></pre>

<p>```</p>

<h3>Forms</h3>

<p><strong>How do we build forms that give users the same abilities we have through forms?</strong>
If a field name end in an [], it will allow multiple fields and rails will treat it as unique values and glob them together in a params array (4:46)
- If you want to have multiple fields anem it with an empty array</p>

<p>in the mixtapes_controller
``` ruby
@mixtape.songs &lt;&lt; Song.find(params[:song_ids])</p>

<h1>this would also work</h1>

<p>params[:song_ids].each do |song_id|
  @mixtape.mixtape_songs.build :song => song_id
end
```</p>

<p>Next level of abstraction up... (4:55)
in the html we want to pass in:
mixtape[song_ids][]</p>

<p>??Mass assignment is this accordian of ____
a writer method implies an attribute of a model
<strong>Main goal as a programmer</strong> name your data so that it is easily accessbile in params</p>

<p>TODO (5:03)
HTML:
scope, attribute, attribute kind</p>

<h3>form_tag helper</h3>

<p>NEXT: <em>A rails implementation: form_tag helper</em>, a low level rails helper
all these methods do is generate html for you. not all that railsy.
<code>
&lt;%= form_tag mixtapes_path do %&gt;
</code>
At least we aren't writing HTML here now... this level of implementation gives you lots of flexibility and control but at the expense of maintainability and explicitness.</p>

<h3>form helper builders</h3>

<p><em>html, form_tag helpers family, form helpers in order of low level of abstraction to higher</em>
want to bind the active record object to the form element
e.g. text_field, label
(5:17)
<code>ruby
&lt;%= label :mixtape, :name %&gt; #:mixtape represents @mixtape, but rails doesn't support @mixtape
&lt;%= text_field :mixtape, :name %&gt;
</code></p>

<h3>form_for</h3>

<p>We want to bind the instance var to the form itself
- the problem with text_field is that hte form is still built without any knowledge of the active record instance behind the form --> it should be an extension of the object
- these are the way our scaffolds normally work</p>

<p>form_for method yields a form builderthat knows the model the form is about</p>

<p>mixtape_form.object would return the mixtape object because it has knowledge of the form object</p>

<p>you also get access to <em>fields_for</em> -
<code>ruby
mixtape_form.fields_for :mixtape_songs, @mixtape.mixtape_songs.build, :index =&gt; 0 do
|mixtape_songs_field| #index option will increment them automatically
  mixtape_songs_fields_for.label :song_id
  mixtape_songs_fields_for.text_field :song_id
 end
</code>
Does your model implement a method called "mixtape_songs_attributes="
``` ruby
accepts_nested_attributes_for :mixtape_songs</p>

<h1>builds this method:</h1>

<p> def mixtape_songs_attributes=(attributes)
   attributes.each do |attribute_has|
   MixtapeSong.build.attribute_has
 end</p>

<h1>this assigns the attributes of the mixtape_songs</h1>

<h1>this is the same as</h1>

<p>def mixtape_songs_attributes=(attributes)
   attributes.each do |index, mixtape_song_attributes|</p>

<pre><code> MixtapeSong.new :song_id = mixtape_song_attributes[:song_id]
</code></pre>

<p>   end
end
```</p>

<p><a href="http://masonoise.wordpress.com/2010/07/23/rails-and-forms-using-accepts_nested_attributes_for/">Read</a>
<a href="http://railscasts.com/episodes/196-nested-model-form-part-1">railscast</a>
<a href="http://asciicasts.com/episodes/196-nested-model-form-part-1">ascii casts</a></p>

<p><strong>an attribute has a getter and setter method called the name of the attribute</strong></p>

<p>Rails Casts on this subject:
<a href="http://railscasts.com/episodes/47-two-many-to-many/">Many to Many</a></p>

<p><a href="http://railscasts.com/episodes/73-complex-forms-part-1/">Complex Forms - 1</a></p>

<p><a href="http://railscasts.com/episodes/74-complex-forms-part-2/">Complex Forms - 2</a></p>

<p><a href="http://railscasts.com/episodes/75-complex-forms-part-3">Complex Forms - 3</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-part-1">Nested models 1</a></p>

<p><a href="http://railscasts.com/episodes/196-nested-model-form-revised">Nested Models- revised</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/NestedAttributes/ClassMethods.html">API reading</a></p>
]]></content>
  </entry>
  
</feed>
