<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book_notes | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/book-notes/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2016-07-27T11:39:03-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linchpin by Seth Godin Notes]]></title>
    <link href="http://adamjonas.com/blog/linchpin-by-seth-godin-notes/"/>
    <updated>2016-07-27T11:36:00-04:00</updated>
    <id>http://adamjonas.com/blog/linchpin-by-seth-godin-notes</id>
    <content type="html"><![CDATA[<ul>
<li>Notes:

<ul>
<li>Obedience is no longer rewarded - 4</li>
<li>We weren't born to be cogs, we were trained to be cogs - 6</li>
<li>schools should teach: how to solve interesting problems, how to lead - 47</li>
<li><em>Emotional labor</em> - 57</li>
<li>Jean baptist Colbert - 63: did he write down any of his thoughts?</li>
<li>Acknowledge fear, then proceeds - 65</li>
<li>Tom peters - 83</li>
<li>No one cares how hard you work- 95</li>
<li>Someone can do your job better and cheaper, not your art - 97</li>
<li>Artists are optimists- 98</li>
<li>Creativity is the instinct to produce - 102</li>
<li>Shipping -101-103</li>
<li>Steve McConnell - poorly timed thrashing 104</li>
<li>Elizabeth Gilbert Ted talk - 106</li>
<li>War of art, Steve pressfield- 107</li>
<li>Bio of lizard brain -109</li>
<li>You are a winner because you learn from losing - 115</li>
<li>3 biological factors that drive job performance: social intelligence, fear response, and perception - public speaking brings together all 3 - 124</li>
<li>Fear is the most important emotion we have - it kept our ancestors alive. It dominates all other emotions. 124</li>
<li>Symptoms of lizard brain - 127</li>
<li>Leo babauta zen habits - 135</li>
<li>Shenpa: Tibetan word that roughly means scratching the itch - 138</li>
<li>Planing with the index card technique  146</li>
<li>Permission marketing? - 148</li>
<li>Pizzeria owner made shirts with bad Yelp reviews - 152</li>
<li>Damaging business book - Robert ringer - looking out for number one 153</li>
<li>Linus will never need to worry about finding work because he gave away Linux - 162</li>
<li>Sunny bates - 166</li>
<li>Clay shirky, Dan rushkoff - 169</li>
<li>Richard Branson - chartering a plane - 180</li>
<li>Can't get attached to the objects of your attention -184</li>
<li>Art is defined by the fact I can't tell you how to do it - 188</li>
<li>Your product should match your marketing, not the other way round -201</li>
<li>Deanna Vogt, Corp coach -202</li>
<li>Resilience, Ralph Waldo Emerson - 208</li>
<li>5 elements of a personality: openness, conscientiousness, extraversion, agreeableness, and emotional stability - 210</li>
<li>Honest signals, book - 214</li>
<li>Dale Carnegie - 217</li>
<li>Creative -</li>
<li>Personal, original, unexpected, useful.</li>
<li>Unique creative - domain knowledge, position of trust, generosity to contribute back - 219</li>
<li>Org obey newton's laws: a team at rest stays at rest - 221</li>
<li>Lester Wunderman: invented direct marketing - 222</li>
<li>Focus on making change down not up. Interacting with customers and employees is easier than bosses and investors - 229</li>
<li>Pranja - see the world objectively - 235</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Ruby Edition Notes]]></title>
    <link href="http://adamjonas.com/blog/refactoring-ruby-edition-notes/"/>
    <updated>2012-11-10T11:22:00-05:00</updated>
    <id>http://adamjonas.com/blog/refactoring-ruby-edition-notes</id>
    <content type="html"><![CDATA[<h3>Replacing the Conditional Logic on Price Code with Polymorphism [p.32]</h3>

<blockquote><p>Replacing the Conditional Logic on Price Code with Polymorphism
The first part of this problem is that case statement. It is a bad idea to do a case based on an attribute of another object. If you must use a case statement, it should be on your own data, not on someone else’s.
  - <a href="http://robots.thoughtbot.com/post/31728620503/refactoring-replace-conditional-with-polymorphism">Thoughtbot Reading</a></p></blockquote>

<p>??Receiver on page 35?</p>

<h3>Refactoring is... [p.53]</h3>

<blockquote><p>(noun) A change made to the internal structure of software to make it easier to understand and cheaper to modify with- out changing its observable behavior.</p></blockquote>

<ul>
<li><p>Programming in about saying exactly what you want. But there is another user of your source code. Someone will try to read your code in a few months’ time to make some changes. We easily forget that extra user of the code, yet that user is actually the most important.</p>

<ul>
<li>Who cares if the computer takes a few more cycles to execute something? It does matter if it takes a programmer a week to make a change that would have taken only an hour if she had understood your code.</li>
<li>when you are trying to get the program to work, you are not thinking about that future developer.

<ul>
<li>Often this future developer is me. [p. 55]</li>
</ul>
</li>
</ul>
</li>
<li><p>Kent Beck often makes about himself, “I’m not a great programmer; I’m just a good programmer with great habits.” [p. 56]</p></li>
<li>Don Roberts: The first time you do something, you just do it. The second time you do something similar, you wince at the duplica- tion, but you do the duplicate thing anyway. The third time you do something similar, you refactor. [p. 57]</li>
</ul>


<h3>Problems with refactoring [p. 63]</h3>

<ul>
<li>takes a while to create nothing</li>
<li>performance deoptimization</li>
<li>changing behavior</li>
</ul>


<h3>Code Smells</h3>

<ul>
<li>Duplicated Code [p. 74]</li>
<li>Long Method [p. 74-75]

<ul>
<li>A heuristic we follow is that whenever we feel the need to com- ment something, we write a method instead.</li>
<li>Conditionals and loops also give signs for extractions.</li>
</ul>
</li>
<li>Large Class [p. 76]

<ul>
<li>When a class is trying to do too much, it often shows up as too many instance variables. When a class has too many instance variables, duplicated code cannot be far behind.</li>
</ul>
</li>
<li>Long Parameter List [p. 76]</li>
<li>Divergent Change [p. 77]

<ul>
<li>When we make a change we want to be able to jump to a single clear point in the system and make the change. When you can’t do this you are smell- ing one of two closely related pungencies.</li>
</ul>
</li>
<li>Shotgun Surgery

<ul>
<li>Every time you make a kind of change, you have to make a lot of little changes to a lot of different classes.</li>
<li>opposite of divergent change</li>
</ul>
</li>
<li><strong>Feature Envy [p. 78]</strong>

<ul>
<li>a method that seems more interested in a class other than the one it actually is in.</li>
</ul>
</li>
<li></li>
</ul>


<h3>Extract Method [p. 102]</h3>

<ul>
<li>You have a code fragment that can be grouped together.

<ul>
<li>Turn the fragment into a method whose name explains the purpose of the method.</li>
</ul>
</li>
</ul>


<h3>Inline Temp [p. 110]</h3>

<ul>
<li>You have a temp that is assigned to once with a simple expression, and the temp is getting in the way of other refactorings.

<ul>
<li>Replace all references to that temp with the expression.</li>
</ul>
</li>
</ul>


<h3>Replace With Query [p. 111]</h3>

<ul>
<li>You are using a temporary variable to hold the result of an expression.

<ul>
<li>Extract the expression into a method. Replace all references to the temp with the expression. The new method can then be used in other methods.</li>
</ul>
</li>
</ul>


<h4>Ternary</h4>

<p>```ruby Ternary p. 114</p>

<h1>from</h1>

<p>def price
a_base_price = base_price if base_price > 1000</p>

<pre><code>discount_factor = 0.95
</code></pre>

<p>  else</p>

<pre><code>discount_factor = 0.98
</code></pre>

<p>  end
  a_base_price * discount_factor
end</p>

<h1>to (not an exact refactor, but good use of ternary)</h1>

<p>def discount_factor
  base_price > 1000 ? 0.95 : 0.98
end
```</p>

<h3>Extraction Method [p. 120]</h3>

<h3>Remove assignment parameters</h3>

<p><code>ruby
def a_method(foo)
  foo.modify_in_some_way # that's OK
  foo = another_object # trouble and despair will follow you
end
</code></p>

<h3>Replace Loop with Conditional</h3>

<p><code>ruby
managers = []
employees.each do |e|
  managers &lt;&lt; e if e.manager?
end
</code></p>

<h3>Lazy Initialized Attribute</h3>

<ul>
<li>Initialize an attribute on access instead of at construction time.</li>
</ul>


<p>```ruby Lazy Initialized Attribute
class Employee
  def initialize</p>

<pre><code>@emails = []
</code></pre>

<p>  end
end</p>

<h1>becomes</h1>

<p>class Employee
  def emails</p>

<pre><code>@emails ||= []
</code></pre>

<p>  end
end
```</p>

<h3>Replace Methods with Method Objects</h3>

<blockquote><p>Turn the method into its own object so that all the local variables become instance variables on that object. You can then decompose the method into other methods on the same object.[p. 129]</p></blockquote>

<h3>Subsitute Algorithm</h3>

<p>```ruby
Replace the body of the method with the new algorithm.
def found_friends(people)
  friends = []
  people.each do |person|</p>

<pre><code>if(person == "Don")
  friends &lt;&lt; "Don"
end
if(person == "John")
  friends &lt;&lt; "John"
end
if(person == "Kent")
  friends &lt;&lt; "Kent"
</code></pre>

<p>end end
  return friends
end</p>

<h1>To</h1>

<p>def found_friends(people)
  people.select do |person|</p>

<pre><code>%w(Don John Kent).include? person
</code></pre>

<p>  end
end
```</p>

<h3>Replace Loop with collection p.134</h3>

<p>```ruby
managers = []
employees.each do |e|
  managers &lt;&lt; e if e.manager?
end</p>

<h1>to</h1>

<p>managers = employees.select {|e| e.manager?}</p>

<p>offices = []
employees.each {|e| offices &lt;&lt; e.office}</p>

<h1>to</h1>

<p>offices = employees.collect {|e| e.office}</p>

<p>managerOffices = []
employees.each do |e|
  managerOffices &lt;&lt; e.office if e.manager?
end</p>

<h1>to</h1>

<p>managerOffices = employees.select {|e| e.manager?}.</p>

<pre><code>                       collect {|e| e.office}
</code></pre>

<p>total = 0
employees.each {|e| total += e.salary}</p>

<h1>to</h1>

<p>total = employees.inject(0) {|sum, e| sum + e.salary}
```</p>

<h3>Extract Surround Method p.135</h3>

<blockquote><p>You have two methods that contain nearly identical code. The variance is in the middle of the method.
<em>Extract the duplication into a method that accepts a block and yields back to the caller to execute the unique code.</em></p></blockquote>

<ul>
<li>This exists in Gitbo</li>
</ul>


<h3>Class Annotation p.139</h3>

<blockquote><p>Declare the behavior by calling a class method from the class definition.</p></blockquote>

<p><code>hash_initializer :author_id, :publisher_id, :isbn</code> like <code>attr_accessor</code> or <code>repo_params</code></p>

<h3>Introduce Named Parameters p.142</h3>

<blockquote><p>Convert the parameter list into a Hash, and use the keys of the Hash as names for the parameters.</p></blockquote>

<p><strong>This is what rails does with params!</strong></p>

<p>```ruby
SearchCriteria.new(5, 8, "0201485672")</p>

<h1>TO</h1>

<p>SearchCriteria.new(:author_id => 5, :publisher_id => 8, :isbn =>"0201485672")</p>

<h1>like an options path</h1>

<p>```</p>

<h3>Dynamic Method Definition p.152</h3>

<p><a href="/blog/dynamic-method-definition/">see</a></p>

<h3>Moving methods p.168</h3>

<blockquote><p>The bread and butter of refactoring</p></blockquote>

<h3>Move Field p.173</h3>

<blockquote><p>I consider moving a field if I see more methods on another class using the information in the field than the class itself. I may choose to move the methods; this decision is based on interface. But if the methods seem sensible where they are, I move the field.</p></blockquote>

<h3>Extract Class p.175</h3>

<blockquote><p>You have one class doing work that should be done by two.</p></blockquote>

<h3>Inline Class p. 179</h3>

<blockquote><p>A class isn’t doing very much. <em>Move all its features into another class and delete it.</em></p></blockquote>

<h3>Self Encapsulate Field p. 188</h3>

<blockquote><p>You are accessing a field directly, but the coupling to the field is becoming awkward. <em>Create getting and setting methods for the field and use only those to access the field.</em></p></blockquote>

<p>```ruby
def total
  @base_price * (1 + @tax_rate)
end</p>

<h1>TO</h1>

<p>attr_reader :base_price, :tax_rate
def total
  base_price * (1 + tax_rate)
end
```</p>

<h3>Replace array with object p.201</h3>

<p>```ruby
row = []
row[0] = "Liverpool"
row[1] = "15"</p>

<h1>TO</h1>

<p>row = Performance.new
row.name = "Liverpool"
row.wins = "15"
```</p>

<h3>Replace hash with object p.206</h3>

<h3>Encapsulate Collections p.219</h3>

<blockquote><p>A method returns a collection. <em>Make it return a copy of the collection and provide add/remove methods.</em></p></blockquote>

<p>```ruby
def add_course(course)
  @courses &lt;&lt; course
end</p>

<p>def remove_course(course)
  @courses.delete(course)
end
```</p>

<h3>Lazily Initialized Attributes p.255</h3>

<p>```ruby
class Employee
  def initialize</p>

<pre><code>@emails = []
</code></pre>

<p>  end
end
class Employee
  def emails</p>

<pre><code>@emails ||= []
</code></pre>

<p>  end
end
```</p>

<h2>Chapter 9: Simplifying Conditional Expressions</h2>

<h3>Replace Conditional with Polymorphism p. 279</h3>

<h3>Introduce Null Object p. 284</h3>

<blockquote><p>You have repeated checks for a nil value. <em>Replace the nil value with a null object.</em></p></blockquote>

<h3>Replace the conditional code with the more idiomatic Ruby construct.</h3>

<ul>
<li>Encapsulate if/else, and/or logic in their own methods</li>
</ul>


<p>```ruby
parameters = params ? params : []</p>

<h1>becomes</h1>

<p>parameters = params || []
<code>
  - Use &amp;&amp; instead of multiple ifs
</code>ruby
if on_vacation?
  if length_of_service > 10</p>

<pre><code>return 1
</code></pre>

<p>  end
end
0.5</p>

<h1>This would be changed to</h1>

<p>if on_vacation? &amp;&amp; length_of_service > 10
  return 1
end
0.5
```</p>

<h3>Quote</h3>

<blockquote><p>One of the most fundamental, if not the fundamental, decision in object design is deciding where to put responsibilities. I’ve been working with objects for more than a decade, but I still never get it right the first time. That used to bother me, but now I realize that I can use refactoring to change my mind in these cases. p.167</p></blockquote>

<h2>Questions:</h2>

<ul>
<li>what is the receiver on page 35?</li>
<li>weird symbols on p127. T?L?1</li>
<li><p>don't understand what is happening on p. 184</p>

<ul>
<li>Stopped at p. 287</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Web Development with Rails]]></title>
    <link href="http://adamjonas.com/blog/agile-web-development-with-rails/"/>
    <updated>2012-10-30T10:33:00-04:00</updated>
    <id>http://adamjonas.com/blog/agile-web-development-with-rails</id>
    <content type="html"><![CDATA[<ul>
<li>ORM libraries map database tables to classes, rows to objects, and columns to attributes of those objects.</li>
<li>Class methods are used to perform table-level operations</li>
<li>Instance methods are used to perform operations on individual rows.</li>
<li>Modules server two purposes

<ul>
<li>namespace: letting you define methods whose names will not clash with those defined elsewhere</li>
<li>And they allow you to share functionality between classes</li>
</ul>
</li>
<li>a ||= b
```ruby a operation= b is the same as a = a operation b
count += 1

<h1>same as</h1>

<p>count = count + 1</p></li>
</ul>


<p>price *= discount</p>

<h1>same as</h1>

<p>price = price * discount</p>

<p>count ||= 0</p>

<h1>same as</h1>

<p>count = count || 0
```
- lambda
- numericality
- catalog display is really just a glorified product listing.
- every time a request comes in, we can recover the identity from the session and use it to find the cart in the database
- dependent: :destroy -> indicates that the existence of line items is dependent on the existence of the cart
- if a table has foreign keys, the corresponding model should have a belongs_to for each.
- the default HTTP method for a link is a get, the default HTTP method for a button is a post.
- @cart.line_items.build -> this causes a new line item relationship to be built between the @cart object and the product. You can build the relationship from either end.
- Rails matches on is add_XXX_to_TABLE and remove_XXX_from_TABLE where the value XXX is ignored; what matters is the list of the column names and the types that appear after the migration name.
- link_to_unless_current
- if @person is just an empty object structure, form_form will work on the assumption that this is to create a new object. If @person actually contains data, however, form_for will assume that its form is editing that object and create a different looking form element, a hidden field to enable Rails' REST capabilities.
- helpers are simply modules containing methods that assist a view.
- link_to and link_to_if take a condition parameter
- a flash is a bucket (actually closer to a hash) in which you can store stuff as you process a request.
- you can pass parameters to a partial, so that the partial can render different results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons from 97 things every programmer should know]]></title>
    <link href="http://adamjonas.com/blog/lessons-from-97-things-every-programmer-should-know/"/>
    <updated>2012-09-24T09:29:00-04:00</updated>
    <id>http://adamjonas.com/blog/lessons-from-97-things-every-programmer-should-know</id>
    <content type="html"><![CDATA[<h3>The boy scout rule (p.16)</h3>

<ul>
<li>"Always leave a campground cleaner than you found it."

<ul>
<li>"Always check in a module a little cleaner than when you checked it out."</li>
</ul>
</li>
</ul>


<h3>Don't repeat yourself (p.60)</h3>

<ul>
<li><p>Duplication is waste</p></li>
<li><p>Repetition in process calls for automation</p></li>
<li><p>Repetition in logic calls for abstraction</p></li>
<li><p>A matter of principle: once and only once principle</p></li>
</ul>


<h3>Know your next commit (p.94)</h3>

<ul>
<li><p>Understanding your commit in the greater user story scope is valuable, but stay focused on your specific goal.</p></li>
<li><p>Define a task that would constitute a productive step.</p></li>
</ul>


<h3>Learn to estimate (p.100)</h3>

<ul>
<li><p>An estimate is an approximate calculation or judgment of the value, number, quantity, or extent of something.</p></li>
<li><p>A target is a statement of a desirable business objective.</p></li>
<li><p>A commitment is a promise to deliver specified functionality as a certain level of quality by a certain date or event.</p></li>
</ul>


<h3>Make interfaces easy to use correctly and hard to use incorrectly (p.110)</h3>

<ul>
<li><p>A.K.A. defensive design</p></li>
<li><p>Making interfaces hard to use incorrectly requires two things: first, you must anticipate errors users might make and find ways to prevent them. Second, you must observe how an interface is misused during early release and modify it to prevent such errors.</p></li>
</ul>


<h3>Missing opportunities for polymorphism (p.118)</h3>

<ul>
<li>Polymorphism, taken from Greek, means many (poly) forms (morph). In the context of programming, polymorphism refers to many forms of a particular class of objects or method.</li>
</ul>


<h3>The professional programmer (p.134)</h3>

<ul>
<li><p>pros are responsible for their own career</p></li>
<li><p>pros take responsibility for the code they write</p></li>
<li><p>pros are team players</p></li>
<li><p>pros do not tolerate big bug lists</p></li>
<li><p>pros do not make a mess.</p></li>
</ul>


<h3>Put down the mouse and step away from the keyboard (p.138)</h3>

<ul>
<li><p>Focus is good, but to get through a problem we often have to walk away from the problem.</p></li>
<li><p>While you are coding, the logical part of the brain is active and the creative side is shut out. It can't present anything to you until the logical side takes a break.</p></li>
</ul>


<h3>Read code (p.140)</h3>

<ul>
<li>Write code so that it is readable for others. Read other people's code.</li>
</ul>


<h3>Read the humanities (p.142)</h3>

<ul>
<li>Coding is about communicating with others through experience. Understand metaphors and how to express your thoughts to others in terms they can understand.</li>
</ul>


<h3>Resist the temptation of the singleton pattern (p.146)</h3>

<ul>
<li>the singleton pattern is a design pattern that restricts the instantiation of a class to one object.</li>
</ul>


<h3>The single responsibility principle (p.152)</h3>

<ul>
<li><p>Gather together things that change for the same reason, and separate those things that change for different reasons.</p></li>
<li><p>Good system design means that we separate the system into components that can be independently deployed. Independent deployment means that if we change one component, we do not have to redeploy any of the others.</p></li>
</ul>


<h3>Two heads are better than one (p.170)</h3>

<ul>
<li>Pair programming is more productive for learning and long term enjoyment of the profession.</li>
</ul>


<h3>Ubuntu coding for your friends (p.174)</h3>

<ul>
<li><p>"A person is a person through (other) persons."</p></li>
<li><p>So it follows, "a developer is a developer through other developers."</p></li>
<li><p>"Code is code through other code."</p></li>
<li><p>The quality of the code I write affects the quality of the code you write.</p></li>
<li><p>Zen is about the individual. Ubuntu is about the Zen a group of people. Very, very rarely do we create code for ourselves alone.</p></li>
</ul>


<h3>Unix tools > IDEs (p.176)</h3>

<h3>WET dilutes performance bottlenecks (p.182)</h3>

<ul>
<li>WET (write every time) the antithesis of DRY</li>
</ul>


<h3>Write code as if you had to support it for the rest of your life (p.186)</h3>

<ul>
<li>The code your wrote many years ago still influences your career. People form opinions of you based on the code they see.</li>
</ul>


<h3>Write tests for people (p.190)</h3>

<ul>
<li>Good tests act as documentation for the code they are testing.</li>
</ul>


<h3>You gotta care about the code (p.192)</h3>

<ul>
<li><p>The difference between good and bad programmers is attitude.</p></li>
<li><p>The code to hell is paved with good intentions. To be an excellent programmer, you need to rise above good intentions, and actually care about the code.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
