<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: databases | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/databases/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-03-09T08:47:03-05:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Databases with Brad Urani]]></title>
    <link href="http://adamjonas.com/blog/databases-with-brad-urani/"/>
    <updated>2017-03-09T08:42:00-05:00</updated>
    <id>http://adamjonas.com/blog/databases-with-brad-urani</id>
    <content type="html"><![CDATA[<p>Brad Urani @confoo</p>

<h3>ACID -></h3>

<p>atomicity: all or nothing. If one of 3 writes fails it rolls it back
Consistency:
Isolation:
Durability: DB survives</p>

<ul>
<li>no-sql aren't faster because of algorithms, they are faster because they did it because they did away with the guarantees</li>
</ul>


<p>google spanner - reliable network because it's with in their own fiber optics</p>

<h3>SQL is declarative language</h3>

<ul>
<li>don't give the computer exact instructions. Giving the comp a rough outline and the DB.</li>
</ul>


<h3>index is a tree</h3>

<ul>
<li>binary tree</li>
<li>doubled the size of the tree but only increased by 33%  - O(log n)</li>
<li>balanced tree -> rebalancing in order to make it as fast as possible</li>
<li>why not add indexes to everything

<ul>
<li>disk space and inserts</li>
</ul>
</li>
</ul>


<h3>Quick sort</h3>

<ul>
<li>fastest, but not that fast for records on disk</li>
</ul>


<h3>Merge sort</h3>

<ul>
<li>divide and conquor algorithm</li>
<li>O(n log n)</li>
</ul>


<h3>Joins:</h3>

<ul>
<li>nested loop JOINs - O(n<sup>2)</sup></li>
</ul>


<h3>Hash Join -> O(n)</h3>

<ul>
<li>Hash tables -> values are pointers because they are in linked lists

<ul>
<li>building the hash table from the beginning is expensive.</li>
<li>MD5? go with a bit key that doesn't guarantee no collisions</li>
</ul>
</li>
<li>good for lots of duplicates</li>
</ul>


<h3>Merge Join -> O(m log n)</h3>

<ul>
<li>lists are already sorted.</li>
</ul>


<h3>Query plans</h3>

<ul>
<li>explain or explain analyze -> can tune the query to be faster</li>
</ul>


<h3>natural selection process for finding the best query plan</h3>

<ul>
<li>like genetic selection</li>
<li>doing all this in milliseconds</li>
<li>Evaluation -> selection -> crossover -> mutation</li>
</ul>


<h3>Caching</h3>

<ul>
<li>cache warmup period</li>
<li>Least recently used (LRU) in memory cache</li>
</ul>

]]></content>
  </entry>
  
</feed>
