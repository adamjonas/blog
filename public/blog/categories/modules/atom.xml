<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: modules | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/modules/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2016-05-03T10:10:40-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day12]]></title>
    <link href="http://adamjonas.com/blog/fis-day12/"/>
    <updated>2012-10-19T09:36:00-04:00</updated>
    <id>http://adamjonas.com/blog/fis-day12</id>
    <content type="html"><![CDATA[<h3>POTD: Tim Berners-Lee</h3>

<ul>
<li>physicist</li>
<li>invented the world wide web in 1989 @ <a href="http://public.web.cern.ch/public/">Cern</a></li>
<li><a href="http://en.wikipedia.org/wiki/Marshall_McLuhan">Marshall_McLuhan</a></li>
</ul>


<h3>Modules</h3>

<p><strong>Dogs and humans can both run, so should they inherit from runner or runnable?</strong></p>

<p>We put this shared behavior into a module so that the class can include or <strong>mixin</strong> modules.</p>

<p>modules can include other modules</p>

<p>include - is for the instance methods
extend - is for the class methods</p>

<p>super - call the same exact message on the class above</p>

<p>```ruby Simple Inheritance
class Animal
 attr_accessor :legs</p>

<p> def initialize(legs_count = 4)</p>

<pre><code>@leg = legs_count
</code></pre>

<p> end
end</p>

<p>class Human &lt; Animal
  attr_accessor :hair_color #this is an additional accessor
  #and doesn't over-ride any #other attr_accessor</p>

<h1>this overides the initialize in the Animal class</h1>

<pre><code>def initialize
    super(2) #super sexy
end
</code></pre>

<p>end
```</p>

<p>```ruby The Builder Pattern
class Animal</p>

<pre><code>include Movement::Animal
</code></pre>

<p>end</p>

<p>class Human</p>

<pre><code>include Movement::Animal
include Movement::Human
</code></pre>

<p>end
```</p>

<p><strong>A class is a module (that can be instantiated).</strong></p>

<h3>ERB</h3>

<p>The <a href="http://www.ruby-doc.org/stdlib-1.9.3/">standard library</a> is separate because you can release ruby and the standard lib without updating the release of the other</p>

<p>&lt;%=  %> (known as a delimiter) is like interpolation for a template</p>

<p>```ruby
require 'erb'</p>

<p>x = 42</p>

<h1>EOF = end of file</h1>

<p>template = ERB.new &lt;&lt;-EOF</p>

<pre><code>the value of x is: &lt;%= x %&gt;
</code></pre>

<p>EOF</p>

<p>puts template.result(binding) #the value of x is :42</p>

<p>x = 24
puts template.result(binding) #the value of x is: 24
```</p>

<p>binding - is equal to the current scope - return to me everything in the universe that happened at this point in time.</p>
]]></content>
  </entry>
  
</feed>
