<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TDD | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-03-31T11:46:07-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Driven Development]]></title>
    <link href="http://adamjonas.com/blog/test-driven-development/"/>
    <updated>2012-10-24T13:26:00-04:00</updated>
    <id>http://adamjonas.com/blog/test-driven-development</id>
    <content type="html"><![CDATA[<p>??browser testing? this falls under acceptance tests?</p>

<p><em>Difference between mock, stub, and fixture?</em> They are all a mechanisms to decouple data from the database. If your DB is down, you couldn't run your test suite.</p>

<p><em>Fixtures and factories</em> sort of relate to each other so that you don't have to instantiate a bunch of objects. <em>Fixtures-</em> are stable data to be used in the test environment. Fixtures are written in YAML.</p>

<p><em>mocks and stubs</em>: connect to the FB api, but you don't need to, so you create something that responses with canned data like it is the facebook api.
<a href="http://martinfowler.com/articles/mocksArentStubs.html">See mocks aren't stubs by Martin Fowler</a></p>

<p>why does a spec folder hold the tests? This outlines the specifications?
  - A specification is an explicit set of requirements to be satisfied by a material, product, or service.</p>

<p>??ping ponging - if someone writes a test and the other passes it are you switching off every 5 minutes</p>

<p><a href="http://railscasts.com/episodes/275-how-i-test">"How I test" with Ryan Bates</a></p>

<p>only open the browser when you need to focus on UI. Otherwise use tests.</p>

<ul>
<li><a href="https://github.com/jnicklas/capybara">capybara</a> to simulate the user
factory-girl instead of fixtures -> where you store your factories</li>
<li><p>guard</p></li>
<li><p>integeration_test</p></li>
</ul>


<p>```ruby Capybara DSL Methods
visit login_path</p>

<pre><code>click_link "password"
fill_in "Email", :with =&gt; user.email
click_button "Reset Password"
</code></pre>

<p>```</p>

<p><a href="http://www.skorks.com/2010/01/thoughts-on-tdd-a-case-study-with-ruby-and-rspec/">Good article on the process of testing</a></p>

<h2>Steven Nunez</h2>

<p>@_StevenNunez
conway's game of life</p>

<p>Testing is: the act of isolating parts of your code with a known state to ensure it works as expected</p>

<p>Acceptance testing, integration and tests: cucumber, capybara, webrat</p>

<p>unit tests - take a class, take tests and make objects</p>

<h3>Why test?</h3>

<ul>
<li>want to know when things break</li>
<li>allows for courageous refactoring</li>
<li>gives documentation on how your code is SUPPOSED to work. Learn to expect tests.</li>
<li>It is your duty to deliver working code. Verification.</li>
</ul>


<h3>Testing sounds like an extra step...</h3>

<ul>
<li>Forces you to think small</li>
<li>Less thoughts to juggle</li>
<li>Leads to modular code</li>
<li>write less code</li>
<li>increase documentation: see what the intention was</li>
<li>small victories: always chasing green</li>
</ul>


<h3>RSpec</h3>

<ul>
<li>RSpec provides something called subject

<ul>
<li>subject = Class.new</li>
</ul>
</li>
</ul>


<h3>Write the code you wish you had</h3>

<ul>
<li>test with none, test with 1, test with some</li>
<li>can write a pending test by just writing it blocks</li>
</ul>


<p>BDD is more route => controller => model
TDD is more model => controller => route</p>

<p>practical object oriented design by <a href="http://www.poodr.info">sandi metz</a></p>
]]></content>
  </entry>
  
</feed>
