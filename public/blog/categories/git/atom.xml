<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Hack hack hack...]]></title>
  <link href="http://adamjonas.github.com/adamjonas/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://adamjonas.github.com/adamjonas/"/>
  <updated>2015-08-26T16:53:08-04:00</updated>
  <id>http://adamjonas.github.com/adamjonas/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Cheatsheet]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/git-cheatsheet/"/>
    <updated>2013-08-28T18:31:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/git-cheatsheet</id>
    <content type="html"><![CDATA[<ul>
<li><code>git clean -f -d</code> removes all untracked files. <code>git reset --hard HEAD</code> won't remove untracked files.</li>
<li><code>git checkout &lt;filename&gt;</code> untracks a file and returns it to its original state.</li>
<li><code>git push -u origin my_branch</code> sets upstream. Here is a <a href="http://stackoverflow.com/questions/6089294/why-do-i-need-to-do-set-upstream-all-the-time">good explanation</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Talk]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/git-talk/"/>
    <updated>2012-10-09T13:37:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/git-talk</id>
    <content type="html"><![CDATA[<p>Git Talk with Julia West</p>

<p>git pull = git fetch + git merge
git pull --rebase = git fetch + git rebase #generally don't get the merge commit</p>

<p>git rebase -i "HEAD~5" #=> shows 5 most recent commits in the branch</p>

<p>squash commits- helps you combine commits</p>

<p>merging with fastforwarding
no fast forward is the default at github.</p>

<p>master- ready to go into production
all the work we do is on the feature branch</p>

<p>An important part of the anatomy of a commit is who is its parent</p>

<p>"I keep merging master into my feature branch so that I can have all the commit histories." A rebase will lose the commit histories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FIS Day4]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/fis-day4/"/>
    <updated>2012-10-09T11:07:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/fis-day4</id>
    <content type="html"><![CDATA[<h3>Programmer of the day:</h3>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Grace_Hopper">Grace Hopper:</a>
Helped develop COBOL - first human readable code advocate.
Popularized the word debugging
Nickname - "amazing grace"</li>
</ul>


<h3>Blogging</h3>

<p>Titles names:</p>

<ul>
<li>how to</li>
<li>3 tips for</li>
<li>pros and cons of</li>
</ul>


<p>&lt;compfight.com> to search high-res pictures</p>

<p>end the article with a question</p>

<p>3-5 paragraphs
400-700 wds</p>

<p>skitch- screenshots</p>

<p>Evan Williams- creator of blogger
web log -> weblog -> blog</p>

<p>Matt Mullenwig- creator of wordpress
powers 15% of the internet</p>

<p><a href="http://errtheblog.com/">err the blog</a>
PJ Hyett and Chris Wanstrath</p>

<p><a href="https://speakerdeck.com/">speaker deck</a></p>

<p><a href="http://design-seeds.com/">design helper</a></p>

<p><a href="http://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> is the creator of git</p>

<p><a href="http://en.wikipedia.org/wiki/Capistrano">Capistrano</a></p>

<p><a href="http://demosthenes.info/blog/532/Convert-Images-To-Black-And-White-With-CSS">CSS3 Grey-scale mask</a>
<a href="http://webdesignerwall.com/tutorials/css3-image-styles">CSS3 circle mask image</a>
This also worked really well...
```css
-circle {</p>

<pre><code>    -webkit-border-radius: 61px;
    -moz-border-radius: 61px;
    border-radius: 61px;
    border:1px solid #aaaaaa;
    width:122px;
    height:122px;
</code></pre>

<p>   }
```</p>

<p><a href="http://itde.vccs.edu/rss2js/build.php"><em>JavaScript Feed Creator</em></a></p>

<p>Git workflow:
```
♕ git reset --hard HEAD
HEAD is now at ab33e5d fixed inline styles and added footer
♕ git status</p>

<h1>On branch master # Untracked files:</h1>

<h1>(use "git add <file>..." to include in what will be committed)</h1>

<h1>css/leanJaw-student.css</h1>

<h1>leanJaw-matz.html</h1>

<p>♕ git clean -f
Removing css/leanJaw-student.css
Removing leanJaw-matz.html
♕ git st</p>

<h1>On branch master</h1>

<p>nothing to commit (working directory clean)
♕ git pull --rebase
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git advanced discussion]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/git-advanced-discussion/"/>
    <updated>2012-10-08T17:19:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/git-advanced-discussion</id>
    <content type="html"><![CDATA[<h3>Remotes</h3>

<p>```
git remote -v, which shows you the URL that Git has stored for the shortname to be expanded to:</p>

<p>$ git remote -v
origin  git://github.com/schacon/ticgit.git</p>

<p>$ git remote add [shortname] [url]
$ git remote rm [shortname]
$ git remote rename [oldname] [new name]
```</p>

<h3>Fetch</h3>

<p><code>
$ git fetch [remote-name]
</code></p>

<ul>
<li>It’s important to note that the <strong>fetch</strong> command pulls the data to your local repository — it doesn’t automatically merge it with any of your work or modify what you’re currently working on. You have to merge it manually into your work when you’re ready.</li>
<li>The <em>git pull</em> command to automatically fetch and then merge a remote branch into your current branch.</li>
</ul>


<h3>Pushes</h3>

<p><code>
git push [remote-name] [branch-name]
</code></p>

<h3>Branches</h3>

<p>You can delete a remote branch using the rather obtuse syntax '$ git push [remotename] :[branch]'. If you want to delete your serverfix branch from the server, you run the following:</p>

<ul>
<li><code>$ git push origin &lt;:branch name&gt;</code></li>
<li><code>$ git branch -d &lt;branch name&gt;</code></li>
</ul>


<h3>Rebasing</h3>

<p>In Git, there are two main ways to integrate changes from one branch into another: the <em>merge</em> and the <em>rebase.</em></p>

<ul>
<li><code>$ git rebase master</code></li>
</ul>


<p>It works by going to the common ancestor of the two branches (the one you’re on and the one you’re rebasing onto), getting the diff introduced by each commit of the branch you’re on, saving those diffs to temporary files, resetting the current branch to the same commit as the branch you are rebasing onto, and finally applying each change in turn.</p>

<p><strong>Important:</strong>
Do not rebase commits that you have pushed to a public repository.</p>

<h3>Git rebase onto</h3>

<ul>
<li>this allows you to pop off the commit at a specific SHA and throw that onto another branch. This was incredibily useful for a branch with a screwed up history that you'd like to put on master or something. Good write up <a href="http://pivotallabs.com/git-rebase-onto/">here</a></li>
</ul>


<h3>Git real review</h3>

<p>```
$ git commi­t --ame­nd -m 'addi­ng new' #ammend to last commit
$ git reset­ --sof­t HEAD<sup>­</sup> #erase last commit and rewind to HEAD
$ git reset­ --sof­t HEAD<sup>­^</sup> #erase the last TWO commits
$ git push -u origi­n maste­r #-u to indicate this is the default push for the future
$ git branc­h -r #show all the branches on the remote
$ git push origi­n :weas­el #deletes the weasel branch on the remote</p>

<p>$ git remot­e show origi­n #Specify a ­remote to ­see specif­ic informa­tion about­ that remo­te. The gi­t remote c­ommand wil­l show you­ available­ remotes.
$ git remot­e prune­ origi­n #clean up local repo</p>

<p>$ git tag #list all tags
$ git tag -a v1.3.2 -m 'new versi­on' #create new tag
$ git push --tags
$ git check­out v1.3.1</p>

<p>$ git rebas­e maste­r</p>

<p>$ git add -u #stages all new files AS WELL AS deletions</p>

<p>$ git diff maste­r eleph­ant</p>

<p>$ git log -p #diff and log</p>

<p>$ git confi­g user.email "admi­n@example.­com"</p>

<p>$ git confi­g --glo­bal user.­name "blah­ blah"</p>

<p>$ git confi­g --glo­bal alias­.commit pushi­t
```</p>

<h3>Amend fanciness</h3>

<ul>
<li>Checkout <a href="http://lostechies.com/derickbailey/2010/06/09/git-oops-i-forgot-to-add-those-new-files-before-committing/">Los
Techie's</a> suggestion on amending something without writing a message. I aliased this in my dotfiles which makes it extra fancy.</li>
</ul>


<h3>Removing a file</h3>

<pre><code>git rm file1.txt
git commit -m "remove file1.txt"
</code></pre>

<p>To remove it from the repo AND keep in the local file system:</p>

<pre><code>git rm --cached file.txt
</code></pre>

<ul>
<li><a href="http://stackoverflow.com/questions/2047465/how-can-i-delete-a-file-from-git-repo">stackoverflow</a></li>
</ul>


<h3>Branching</h3>

<p>This will create a new branch based on an revision: <code>♕ git co -b new-branch-name old-branch-name</code></p>

<h3>Questions</h3>

<p>What is a reasonable number of commits per branch?
How often do you commit?
Working on the same file... strategies?
fast forward vs no fast forward</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FISDay0]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/fisday0/"/>
    <updated>2012-10-02T09:25:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/fisday0</id>
    <content type="html"><![CDATA[<p><em>Why are we here?</em></p>

<p>-To fall in love with code</p>

<p>-If you give 100% you will change.</p>

<p><em>Programmer(s) of the day</em></p>

<ul>
<li><p><a href="http://www.sdsc.edu/ScienceWomen/lovelace.html">Ada Lovelace</a></p></li>
<li><p><a href="http://en.wikipedia.org/wiki/Charles_Babbage">Charles Babbage and the difference machine</a></p></li>
</ul>


<p><em>CSS Selectors</em>
```</p>

<h1>elements, #links{</h1>

<p> padding: 25px 0 15px 0;
}</p>

<h1>elements h2{</h1>

<pre><code>font-size: 2em;
</code></pre>

<p>}
```</p>

<h3>Git</h3>

<p>```</p>

<h1>git remote add <remote name> <link></h1>

<p>♕ git remote add group git@github.com:ajonas04/etcetc.com.git
```</p>

<p><code>
git fetch
git co #not ever changing the state of any branch
git pull
git branch -a #shows all local branches
git branch #shows all the remotes
</code>
can get pull requests from forks as well as the head repo</p>

<p>always want to deal with potential conflicts in the feature branch rather than on master</p>

<p><em>rebase</em> take these commits from master and put them in the right place of x feature branch</p>

<p><code>
git rebase master
git co master
git merge add-profile-rexfeng --no-ff #=&gt; merge made by recursive strategy
git push
</code></p>

<p>If it's forked:
<code>
git rebase upstream/master
</code></p>

<p>Git rainbow is not good.</p>

<p>squashing commits</p>

<p>go into my fork as a remote
<code>
git remote add ajonas04 git@github.com:ajonas04/students.flatironschool.com.git
git fetch ajonas04
git co feature-push
git rebase origin/master #resolve
git rebase --continue
</code></p>

<p><code>
git reset --hard HEAD #=&gt; reset to the state of the repo at the last commit in the repo
git branch -D add_profile_page
</code></p>

<p>interactive rebase
```
git rebase master -i</p>

<h1>provide a file that shows all the commits in it</h1>

<p>```</p>

<p>no fastforward versus fastforward
-maintains the fact that you were once on your own branch</p>

<p>recursion and fast forward
checkout the branch</p>

<p><code>
git add . #will ADD all files that haven't been previously committed as well as change modified files
git commit -am 'message' #will change files, but not add new ones
git commit -m 'message' #will just add a message
</code></p>

<p>Workflow to pull down the most updated verison:
```
♕ git fetch upstream
♕ git rebase upstream/master
First, rewinding head to replay your work on top of it...
error: The following untracked working tree files would be overwritten by checkout:</p>

<pre><code>.DS_Store
images/.DS_Store
</code></pre>

<p>Please move or remove them before you can switch branches.
Aborting
could not detach HEAD
[19:02:04] (master) students.flatironschool.com
♕ rm .DS_Store
♕ rm images/.DS_Store
♕ git rebase upstream/master
♕ git add aviflombaum.html
♕ git rebase --continue
♕ subl .
```</p>
]]></content>
  </entry>
  
</feed>
