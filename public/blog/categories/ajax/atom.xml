<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ajax | Hack hack hack...]]></title>
  <link href="http://adamjonas.github.com/adamjonas/blog/categories/ajax/atom.xml" rel="self"/>
  <link href="http://adamjonas.github.com/adamjonas/"/>
  <updated>2015-08-27T09:02:47-04:00</updated>
  <id>http://adamjonas.github.com/adamjonas/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day27]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/fis-day27/"/>
    <updated>2012-11-13T09:21:00-05:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/fis-day27</id>
    <content type="html"><![CDATA[<h3>POTD Jesse James Garrett</h3>

<ul>
<li>Author of <a href="http://www.jjg.net/elements/">elements of user experience</a>

<ul>
<li>elements of style</li>
</ul>
</li>
<li><a href="http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications">Ajax essay</a>

<ul>
<li>asynchronous model</li>
</ul>
</li>
</ul>


<h3>Gitbo</h3>

<ul>
<li><a href="https://github.com/tute/merit">merit</a>/<a href="http://railscasts.com/episodes/364-active-record-reputation-system">reputation</a></li>
<li><a href="https://github.com/javan/whenever">whenever</a></li>
</ul>


<h2>JS With Justin Moses</h2>

<ul>
<li><p>learn some Haskell, lisp -> functional programming</p></li>
<li><p>JS fiddle</p></li>
<li><p><a href="http://jsbin.com/welcome/1/edit">JS Bin</a></p></li>
<li><p>span is an inline div</p></li>
<li><p>when a document is loaded in the browser. it first calls a method on itself called ready.</p>

<ul>
<li>program events onto these objects</li>
<li>find objects within the document and add more events to them</li>
<li>if you try to load it linearly, then you need to wait until the document has full compiled.</li>
</ul>
</li>
<li>think about buttons as button objects and you can bind methods and other objects to that button object</li>
<li>src="http://adamjonas.github.com/adamjonas//code.jquery.com/"

<h2>- put the script tags in the head is good form</h2></li>
</ul>


<p>```</p>

<script>
    function runthis() {
    alert(this);
  }
</script>


<p>```
$ -> jquery shortcut</p>

<p>When the DOM is loaded get going....
```javascript
$(function)(){</p>

<p>}
```</p>

<p>```javascript
$(function)(){
  //alert(this);</p>

<p>  alert($('.btn').html("test123"));
  //matching functions and matching it to all buttons</p>

<p>});
```
document.querySelectorAll('.button') -> is the javascript equivalent to $('.button')</p>

<p>```javascript
$(function)(){</p>

<p>  $('.btn').click(function() {</p>

<pre><code>$('body').append('&lt;button class="btn"&gt;my button&lt;/button&gt;');
</code></pre>

<p>  });
});
```</p>

<p>```javascript
$(function)(){</p>

<p>  $('body').on('click', function()
  {</p>

<pre><code>  $('body').append('&lt;button class="btn"&gt;my button&lt;/button&gt;');
</code></pre>

<p>  });
});
```</p>

<ul>
<li><a href="http://api.jquery.com/on/">.on() event</a></li>
<li>every move, every click these are all reported events

<ul>
<li>event bubbling -> fire event with that div, in the body, in the window

<ul>
<li>target -> event clicked on</li>
<li>event delegation in js -> allows you quickly bind events that don't exist yet</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>AJAX</h3>

<p><code>XMLHttpRequest == $.ajax</code></p>

<p>```javascript AJAX
$(function() {
  var promise = $.ajax({</p>

<pre><code>url:"http://jsbin.com/iyijag.js"
</code></pre>

<p>  }).
  promise.done(function(data){
  //show user data
  alert(data); //alert box with json data
  }).
  promise.fail(function(err){
  // on fail
  }).
  promise.always(function(data){
  //always called
  });
});</p>

<p>```
AJAX by default is get, but
jquery deferred -> chaining things together without certainty of the event</p>

<h3>Questions</h3>

<ul>
<li>debugging in your app. single click on line with chrome will drop in a debugger object.

<ul>
<li>can then see the object in console</li>
</ul>
</li>
<li>if you use it once -> you don't need to name the function, if you want to reuse, you probably want to</li>
</ul>


<h3>Other stuff</h3>

<ul>
<li><a href="http://colorblendy.com/">colorblendy</a></li>
<li><a href="http://mouapp.com/">markdown editor</a></li>
<li><a href="http://www.khanacademy.org/cs">khan academy</a></li>
<li>node inspector for server side</li>
<li><a href="https://npmjs.org">NPM for node</a>- is like ruby gems - server side modules</li>
<li>HTML5 and websockets and threads</li>
</ul>


<h2>Avi Rant</h2>

<ul>
<li>rails works nicely with ember</li>
<li>javascript provides you</li>
</ul>


<h3>Avi Javascript Lecture</h3>

<ul>
<li>if you want to do anything to an object, you need to first grab it from the DOM</li>
<li>document.baseURI</li>
<li>document - returns the whole window</li>
<li>{} in javascript is an object</li>
</ul>


<p>```javascript Building an Object in Javascript
o = {}
//instantiating an object
o.first_name = "avi"
o.last_name = "flom"
o.full_name = function(){this.first_name + " " + this.last_name}
//like self.first_name + " " + self.last_name in ruby</p>

<p>//can see what this is in the log
o.full_name = function(){console.log(this)};</p>

<p>//could do this, but it isn't object oriented
function full_name(object){
  return object.first_name + object.last_name
}
<code>
`$ sign == jQuery`
</code>javascript
document.onready = function(){
  $("form a")
}</p>

<p>document.onready();</p>

<p>//This means that when the document is loaded, fire this.
$(function(){
  $("form a").click(function(x){</p>

<pre><code>alert(x.clientX + "," x.clientY")
return false; //stop the normal event -&gt; like following a link
//this would work like x.preventDeafult();
</code></pre>

<p>  })
});</p>

<p>//x is the event in this case
//$("form a") is almost like a yield from a block, that you will be able to access
<code>
</code>javascript
$(this) // a full blown object that knows about its parent
this // is just a return of DOM. This doesn't have much info</p>

<p>//.attr("href") is like accessing an attribute or key of the object
window.location = $(this).attr("href") +"?source=flatironschool"
```</p>

<ul>
<li>You are hooking into events. You are dependent on the browser and when events are loaded. It's not about linear execution. It's about the browser API.</li>
<li>applying a bind to an element will always happen in a ready box</li>
<li>current target, the thing that was actually clicked</li>
<li>handleObj - the actual event, event type -> both might be a click event</li>
</ul>


<p>```javascript
$(function)(){
  $("form a").click(function(e){</p>

<p>  e.preventDefault;</p>

<p>  //select the object</p>

<p>  //$select = $('#mixtape_mixtape_songs_attributes_0_song');
  $select = $('form select:last'); //grab the last element with a pseudo selector
  //duplicate code
  $new_select = $select.clone();</p>

<p>  console.log($new_select);</p>

<p>  //edit's name
  $next_name = $select.attr("name")
  console.log($next_name)</p>

<p>  next_int = parseInt(next_name.
  replace("mixtape[mixtape_songs_attribute][", "").
  replace("]song_id"))+1;</p>

<p>  new_select.attr("name", next_name)
  //insert it back into the DOM</p>

<p>  $("div.actions")
  return false;
  })
});</p>

<p>//can have a document object that hasn't been inserted into the view yet
```</p>

<p>```javascript
$("a").click(function(){alert("test")});</p>

<p>//equal to
t = function(){alert("test")}; -> this loaded into memory and run when ready.
// t = alert("test") -> this is literal and will be called immediately.
$("a").click(t);
```</p>

<h3>Methods</h3>

<ul>
<li>key press event</li>
<li>blur(), change(), click()</li>
<li>handler() -> the function you want to run when this change occurs</li>
<li>hover is the combo of focus and blur</li>
<li>every keypress comes with two events key down and key up</li>
<li>live -> attaching the event to the body</li>
</ul>


<p>```javascript MouseMove
$(function)(){
  $("form").mousemove(function(e){</p>

<pre><code>console.log(e)
</code></pre>

<p>})
```</p>

<ul>
<li>spyjax</li>
</ul>


<h3>Odemeter</h3>

<p><a href="http://uvumitools.com/odometer.html">http://uvumitools.com/odometer.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day12]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/haw-day12/"/>
    <updated>2012-08-16T10:19:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/haw-day12</id>
    <content type="html"><![CDATA[<ul>
<li>js buttons on tag show pages</li>
<li>fix checkboxes/mass assigning tags</li>
</ul>


<h3>respond_to</h3>

<p>This is basically a glorified case statement...</p>

<p>if no action is specified the default is the action of the namespace
```ruby
def tag</p>

<pre><code>#some code
respond_to do |f|
  f.html {redirect_to :back}
  f.js
end
</code></pre>

<p>  end
```
So it looks for tag.js as the default...</p>

<ul>
<li><p>BUG:</p>

<ul>
<li>tell firefox not to autocomplete</li>
</ul>
</li>
<li><p>checkboxes</p></li>
<li>get all the values</li>
<li><p>submit to server</p></li>
<li><p>loop through the elements</p></li>
<li>gather all the values (which are the ids)</li>
<li>find errors by ids</li>
<li>push in tag name signal</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HAW-day5]]></title>
    <link href="http://adamjonas.github.com/adamjonas/blog/haw-day5/"/>
    <updated>2012-08-06T10:23:00-04:00</updated>
    <id>http://adamjonas.github.com/adamjonas/blog/haw-day5</id>
    <content type="html"><![CDATA[<p>GOALS:
Refactor code, figure out the jquery ajax checkboxes.
ship v1 by the end of the day</p>

<p><a href="http://khelll.com/blog/ruby/ruby-dynamic-method-calling/">send method</a>
<a href="http://philcrissman.com/2009/06/26/rubys-objectsend-can-call-private-and-protected-methods/">send method to call private method</a></p>

<p>```ruby Code that finally worked...
def self.import_from_airbrake</p>

<pre><code>client = AirbrakeAPI::Client.new

errors = client.errors
actions = {:action =&gt; "action", :controller =&gt; "controller", :created_at =&gt; "airbrake_created_at", 
           :error_class =&gt; "error_class", :error_message =&gt; "error_message", :file =&gt; "file",
           :id =&gt; "airbrake_id", :line_number =&gt; "line_number", 
           :most_recent_notice_at =&gt; "airbrake_most_recent_notice_at", 
           :notice_hash =&gt; "notice_hash", :notices_count =&gt; "notices_count", 
           :project_id =&gt; "project_id", :rails_env =&gt; "rails_env", :resolved =&gt; "airbrake_resolved",
           :search_index_me =&gt; "search_index_me", :updated_at =&gt; "airbrake_updated_at"}

 errors.collect do |error| #each error is a hash
  airbrake_error = AirbrakeError.new #this needs to be outside the following loop or it will create a new object during every loop...
  actions.each do |airbrake_action, our_action| #aa is a sym key, oa is a string value
   airbrake_error.send("#{our_action}=".to_sym, error[airbrake_action])# SEND method here

  airbrake_error.attribute_updater #see below
  end
  airbrake_error.save
end
</code></pre>

<p>  end
<code>
</code>ruby Other use of send...
def attribute_updater</p>

<pre><code>@airbrake_errors = AirbrakeError.all

updater_actions = ["notices_count", "action", "controller", "error_class", "file", "line_number",
                  "airbrake_most_recent_notice_at", "notice_hash", "airbrake_resolved", 
                  "airbrake_updated_at"]

if @airbrake_errors.where(airbrake_id: self.airbrake_id).present?
  original_error = @airbrake_errors.find_by(airbrake_id: self.airbrake_id)

    updater_actions.each do |action|
      original_error.send("#{action}=".to_sym, self["#{action}".to_sym])
      original_error.save
    end
else     
end
</code></pre>

<p>  end
```</p>

<p>TODO:
inject method</p>

<p>Per Dave:
-one form that is ignore, one that signal, one that is the tags
-remote true- a flag that going to submit the form via ajax</p>

<p><a href="http://guides.rubyonrails.org/form_helpers.html">Remote True:</a>
Unlike other forms making an asynchronous file upload form is not as simple as providing form_for with :remote => true. With an Ajax form the serialization is done by JavaScript running inside the browser and since JavaScript cannot read files from your hard drive the file cannot be uploaded. The most common workaround is to use an invisible iframe that serves as the target for the form submission.</p>
]]></content>
  </entry>
  
</feed>
