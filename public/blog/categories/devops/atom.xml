<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: DevOps | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-04-19T15:39:00-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Linux Works: What Every Superuser Should Know]]></title>
    <link href="http://adamjonas.com/blog/how-linux-works-what-every-superuser-should-know/"/>
    <updated>2017-04-05T12:13:00-04:00</updated>
    <id>http://adamjonas.com/blog/how-linux-works-what-every-superuser-should-know</id>
    <content type="html"><![CDATA[<h2>Posix shell and Utilities</h2>

<ul>
<li>from <a href="http://shellhaters.org/talk">Shell Hater's handbook with Ryan Tomayko</a></li>
<li><a href="http://shellhaters.org/">posix docs</a></li>
</ul>


<h2>fork() &amp; exec()</h2>

<ul>
<li>When running exec() programs, you are forking a shell and running it on that</li>
<li><a href="https://www.bottomupcs.com/fork_and_exec.xhtml">Fork and exec</a></li>
<li><a href="http://askubuntu.com/questions/428458/why-do-shells-call-fork">Why do shells call fork?</a>

<ul>
<li>exec can only run one thing. So shell creates the child shell runs exec and then returns.</li>
</ul>
</li>
<li>fork() clones the current process, creating an identical child. exec() loads a new program into the current process, replacing the existing one. <a href="http://unix.stackexchange.com/questions/179604/how-do-fork-and-exec-work">From</a></li>
</ul>


<h2>Time slice</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Preemption_(computing">time slice</a>#Time_slice) managed by the scheduler of the CPU. Time slices are <a href="https://superuser.com/a/684394">variable</a> -> need this to keep the illusion of concurrency(having multiple processes at the same time) and multi-tasking, but with one core there is no possibility of doing paralellism.</li>
</ul>


<h2>Builtins</h2>

<ul>
<li>(wikipedia)[https://en.wikipedia.org/wiki/Shell_builtin]

<ul>
<li>executed directly in the shell itself, instead of an external executable program which the shell would load and execute.</li>
<li>Shell builtins work significantly faster than external programs, because there is no program loading overhead.</li>
<li>most notable example is <code>cd</code></li>
<li><code>cd</code> has to be a builtin because the shell itself needs to change its "cwd" - current working directory - not a sub-process. The goal of "cd" is to change the current working directory of the shell itself, and that can't be accomplished from a child process without a lot of special hackery which would end up being more complex than the builtin. <a href="https://www.quora.com/Unix-Why-is-cd-a-built-in-command-in-the-shell-and-not-an-executable-program-like-the-command-ls">from</a>

<ul>
<li>great explanation on how it came to be with a quote from <a href="http://unix.stackexchange.com/a/38819">Dennis Ritchie</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Memory Management</h2>

<ul>
<li>swap -> using the hard disk as RAM</li>
<li>A <a href="https://en.wikipedia.org/wiki/Page_table">page table</a> is the data structure used by a virtual memory system in a computer operating system to store the mapping between virtual addresses and physical addresses. Virtual addresses are used by the accessing process, while physical addresses are used by the hardware, or more specifically, by the RAM subsystem.</li>
</ul>


<h2>Tree</h2>

<ul>
<li><a href="https://superuser.com/questions/359723/mac-os-x-equivalent-of-the-ubuntu-tree-command">tree</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Ops Notes]]></title>
    <link href="http://adamjonas.com/blog/more-ops-notes/"/>
    <updated>2017-03-29T16:18:00-04:00</updated>
    <id>http://adamjonas.com/blog/more-ops-notes</id>
    <content type="html"><![CDATA[<h2>Network partitioning causing exchange issues on rabbitmq</h2>

<ul>
<li>this was after netowrk maintenance</li>
<li>solution was to delete exchange which then is automatically added
back <a href="https://github.com/rabbitmq/rabbitmq-server/issues/887#issuecomment-290177962">documented here</a></li>
</ul>


<h2>Ubuntu 16</h2>

<ul>
<li>ubuntu 16 doesn't ship with upstart so sysctld is what we'll use to
control services. <a href="https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units">systemctl commands</a>

<ul>
<li>can also run from <code>/etc/init.d/service start</code></li>
</ul>
</li>
<li>rsyslog is what we use to get the logs to papertrail</li>
<li>used the oracle version of Java 8</li>
</ul>


<h2>Digital ocean</h2>

<ul>
<li>backups (auto) are different than snapshots (not auto) and different
in pricing as well</li>
</ul>


<h2>Chef</h2>

<ul>
<li><a href="https://docs.chef.io/ohai.html">ohai</a></li>
<li><a href="https://docs.chef.io/chef_shell.html"><code>chef-shell</code></a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crash Course DevOps]]></title>
    <link href="http://adamjonas.com/blog/crash-course/"/>
    <updated>2017-03-20T11:12:00-04:00</updated>
    <id>http://adamjonas.com/blog/crash-course</id>
    <content type="html"><![CDATA[<h2>Wires, cables and WiFi</h2>

<ul>
<li>Bits sent as light beams, no signal loss

<ul>
<li>faster than copper</li>
</ul>
</li>
<li>WiFi is radio and then translated into physical bits over the wires</li>
<li>Bitrate -> bits per second -> how fast it can transmit</li>
<li>bandwidth -> how much data can you receive over a period of time</li>
<li><p>latency -> how long it takes, more hops to talk to Seiji than
Kaitlin in the next room; ping time * distance</p></li>
<li><p><code>traceroute</code> to see hops</p></li>
</ul>


<h2>IP addresses and DNS</h2>

<ul>
<li>ISP</li>
<li>IP is a unique address

<ul>
<li>IPv4 - 4 billion unique addresses isn't enough

<ul>
<li>32 bits, 8 octets</li>
<li>32 bits long, 8 bits for each part of each address</li>
<li>DHCP -> obtaining a lease renewal process on your network.</li>
<li>to the outside world, Flatiron has the same IP provided
by ISP</li>
<li>router provides guests with temporary IP depending on how long
your lease renewal is set</li>
<li>renegotiate IP
?- subnet mask</li>
<li>255.255.255.255 is the max it could go, based on the octet</li>
<li>static IP -> unique in the world</li>
<li>private IP -> re-use private IP addresses behind networks</li>
</ul>
</li>
</ul>
</li>
<li><p> IPv6 - 128 bits instead of 32</p>

<ul>
<li>hex representation to prevent us running out of static IPs</li>
<li><p>DNS servers are split up in TLDs</p>

<ul>
<li>DNS on a router</li>
</ul>
</li>
<li><p>google's DNS will break it up by the TLD and domain</p></li>
<li><a href="http://www.macworld.com/article/2824564/slow-internet-edit-your-dns-settings.html">google DNS</a> versus open DNS</li>
<li>?www doesn't mean anything any more, just another subdomain</li>
<li>?CS of how the domain names at the DNS are stored?</li>
</ul>
</li>
<li><p> TTL</p>

<ul>
<li>this record will expire at X time</li>
<li>set TTL to an hour, it won't have to look it up for an hour</li>
<li>DNS propagation</li>
</ul>
</li>
<li><p>DNS -> record type</p>

<ul>
<li>A record -> address</li>
<li>maps the word name the domain to a physical IP address</li>
<li>PTR -> pointer -> the reverse, input IP and get the domain</li>
<li>FQDN -> A fully qualified domain name (<a href="http://stackoverflow.com/questions/19480767/domain-names-with-dots-at-the-end">FQDN</a>) is the complete domain name for a specific computer, or host, on the Internet.

<ul>
<li>Host name is gmail and .com is the TLD</li>
</ul>
</li>
<li>CNAME -> mail.google.com is a CNAME of googlemail.l.google.com.

<ul>
<li>A records should be unique</li>
</ul>
</li>
<li>why is there a dot at the end?

<ul>
<li>it is an absolute as opposed to the relative address</li>
</ul>
</li>
<li>want multiple MX records, redudency strategy</li>
</ul>
</li>
</ul>


<h2>Packet, routers and reliability</h2>

<ul>
<li>fault tolerant</li>
<li>TCP</li>
<li><p>?How do they determine the route?</p>

<ul>
<li>routers own the ISP and the companies that own them</li>
</ul>
</li>
<li><p>traceroute domain.com</p></li>
<li><p>wireshark is a GUI of <a href="https://danielmiessler.com/study/tcpdump/#gs.9p=ZVMQ"><code>tcpdump</code></a></p></li>
<li><p>IP address can change and it has a serial number or a MAC address
(hardware address)</p></li>
</ul>


<h2>HTTP &amp; HTML</h2>

<ul>
<li>SSL and TLS (successor)

<ul>
<li>http listens on 80 and https listens on 443</li>
<li>sslv3 has been deprecated</li>
</ul>
</li>
<li>certificate authority vouches for site</li>
<li>OpenSSL generates keys, authority will sign that</li>
<li>self-signed certs like for nagios or letsencrypt will work fine</li>
<li>SSLS

<ul>
<li>discrete logorithm problem</li>
</ul>
</li>
<li>handshake process -> how to keep box locked and send secret

<ul>
<li>put treasure in box, lock box, send to friend</li>
<li>friend puts lock on box, sends it back</li>
<li>I remove lock from box and send back</li>
<li>friend unlocks box</li>
</ul>
</li>
<li>SSH

<ul>
<li>ssh forwarding sends private key along</li>
<li>asymetric only used for authentication</li>
<li>symetric is then used for encryption and decryption</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/Bcrypt">bcrypt</a> is what we use for email</li>
</ul>


<h2>DDoS</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Domain_Name_System#DNS_resolvers">DNS resolvers</a> to amplify attack</li>
</ul>


<h2>DevinOps in review</h2>

<ul>
<li><a href="https://github.com/thiagopradi/octopus">Octopus gem</a> -> pooling, load balance select statements to read only
replicas</li>
<li>DB sharding

<ul>
<li>complex SQL joins, will put different tables in different DBs</li>
<li>replication</li>
</ul>
</li>
<li>floating IPs points to the master

<ul>
<li>static IP never changes</li>
<li>use floating IPs rather than DNS because of propogation</li>
</ul>
</li>
<li>usernames:

<ul>
<li>if you have a server on linux it should not be running on root</li>
<li>if it's a system process then it would be ok to run on root</li>
<li>postgres is run as the postgres user

<ul>
<li>apache is run by deployer and passenger -> how ruby achieves
paralellization (a module for apache)</li>
</ul>
</li>
<li>deployer for Ironboard -> easy way to manage keys</li>
<li>how owns the process, who owns the directory where the config
files lives</li>
</ul>
</li>
<li><code>etc/passwd</code> -> all the users on the box and who is logged in</li>
<li>every service that has a port open to the internet it should have
its own user</li>
<li>username is usually the service name</li>
<li><code>/var</code> is usually the log directory</li>
<li><code>/etc</code> is usually the config directory</li>
<li>WAL-E

<ul>
<li>ship our binary logs we sent to s3</li>
<li><a href="https://en.wikipedia.org/wiki/Write-ahead_logging">write ahead logs</a> -> must be complete before actually modifies the
DB with a transaction. This is the mechanism for rollbacks.

<ul>
<li>master just sends the write-ahead logs to the slave which then
just replays them</li>
</ul>
</li>
</ul>
</li>
<li>Backups

<ul>
<li>take a base and then the have these WAL backups and send them off
and it will apply all the deltas</li>
<li>can give us point in time restoration</li>
<li>these logs will fill up our disk</li>
<li>? how long do we keep WAL-E</li>
<li>interface for deleting backups, s3 logs</li>
<li>config of pg is <code>pg_hba.conf</code></li>
<li>script to switch over primary/replication script turns <code>recovery.conf</code> to <code>recovery.done</code></li>
<li><code>failover.sh</code> on the other replica as root

<ul>
<li>breaks replication, now need to configure replication on the new
replication server</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/Iptables">iptables</a> -> firewall</li>
</ul>
</li>
</ul>


<h2>Permissions</h2>

<ul>
<li>User, Group, World -> multiple users on the same machine, make sure
processes don't do stuff they aren't supposed to</li>
<li>chmod 755, 644</li>
<li>all directories have to be 7

<ul>
<li>directories point to other files</li>
</ul>
</li>
<li>cd is a program that takes a directory (file) as an argument and
executes it</li>
<li><code>etc/sudoers</code> -> determines who has root permissions; visudo -> creates a backup and prevents brackage</li>
<li><code>useradd</code> give them a shell and name the user; want to add to the
chef script</li>
</ul>


<h2>load balancer</h2>

<ul>
<li>front-end is learn.co, terminating SSL, in the</li>
<li>backend -></li>
<li>should be root on</li>
</ul>


<h2>Debugging</h2>

<ul>
<li><code>passenger-status --show=requests</code></li>
<li><code>passenger-status</code></li>
</ul>


<h2>Automatic provisioning</h2>

<ul>
<li><a href="https://github.com/digitalocean/doctl">doctl</a></li>
<li><a href="https://github.com/petems/tugboat">tugboat</a></li>
</ul>


<h2>cron</h2>

<ul>
<li>sends mail</li>
</ul>


<h2>IDE backend</h2>

<ul>
<li>backend application -> IDE umbrella</li>
<li>main one is learn-ide-server cookbook</li>
<li>different chef servers</li>
<li>wombat</li>
<li>traffic cop</li>
<li>elixir-build01 -> build elixir on server because linux</li>
<li>new server needs to be added to <a href="https://github.com/flatiron-labs/students-chef-repo/tree/master/cookbooks/learn-ide-haproxy">HAproxy</a></li>
<li>lb -> <code>balance url_param token</code> hashing algorithm that determines
which server the IDE connects to based on their Learn oauth token. (Optimization -> make hashing algo
more granualar so that if a machine gets taken out the rotation, the
othere aren't rebalanced as well</li>
<li>Load balance assignment is determined by dynect traffic management

<ul>
<li>own health monitoring</li>
</ul>
</li>
<li><a href="https://www.gluster.org/">gluster</a> is fancy NFS

<ul>
<li>RAID -> redundant array of independent disks</li>
</ul>
</li>
<li><a href="https://coreos.com/rkt/">rkt</a></li>
<li>PTY - psuedoterminal, terminal emulator, connect to an arbitrary shell</li>
<li>inotify -> FS event watcher</li>
<li>containerization

<ul>
<li><a href="https://en.wikipedia.org/wiki/Aufs">aufs</a> loser -> <a href="https://en.wikipedia.org/wiki/UnionFS">unionfs</a> winner that was merged into linux</li>
</ul>
</li>
<li>? do you bump archived tar'ed files when you archive again</li>
</ul>


<h2>IDE Umbrella</h2>

<ul>
<li>for adding IDE server (<a href="https://github.com/flatiron-labs/ide_umbrella/blob/master/config/prod.exs">node list</a>)</li>
<li>dependencies in <code>mix.exs</code>; <a href="https://github.com/ninenines/cowboy">cowboy</a> is the webserver, <a href="https://github.com/devinus/poolboy">poolboy</a></li>
<li>applications are like slightly fancy supervisors, <a href="https://github.com/bitwalker/distillery">distillery</a> release packaging</li>
<li><code>mix deps.get</code> -> get dependencies</li>
<li><code>iex -S mix</code></li>
<li><code>:cowboy.start</code> -> erlang library, cowboy is lib which is an atom</li>
<li><code>gen_server</code>, an abstraction on top of processes in general

<ul>
<li>provides state and a little behavior</li>
</ul>
</li>
<li><code>agent</code> is just for state</li>
<li>every connection gets its own process</li>
<li>distillery builds them

<ul>
<li>release -> full replacement of previous release, must restart</li>
<li>upgrade -> release plus upgrade instructions, relup file, modify
the code in memory -> hotswap; preferable to release</li>
<li><code>mix edeliver version qa</code></li>
<li><code>mix edeliver version production</code></li>
<li><code>mix edeliver build release</code></li>
<li><code>mix edeliver deployer release to qa</code></li>
<li><code>mix edeliver restart qa</code></li>
<li><code>bin/ide start</code></li>
<li><code>bin/ide attach</code> -> quit with ^D, not ^c (will kill process)</li>
<li><code>bin/ide remote_console</code></li>
<li><code>mix edeliver build upgrade --with=0.1.0+232424323-hdhfd</code></li>
<li><code>mix edeliver deploy upgrade to qa</code> -> will prompt for version
number</li>
</ul>
</li>
</ul>


<h2>Chef</h2>

<ul>
<li>server provisioning

<ul>
<li>consistency, automation</li>
</ul>
</li>
<li>inheritance in the cookbooks, base cookbook -> security</li>
<li>like ruby base cookbooks</li>
<li><a href="https://blog.chef.io/2013/12/03/doing-wrapper-cookbooks-right/">wrapper cookbook</a>, like forking a cookbook without modifying it

<ul>
<li>increasing levels of abstraction</li>
</ul>
</li>
<li>conventions of chef aren't very clearly defined</li>
<li>differences between recipes and cookbooks?</li>
</ul>

]]></content>
  </entry>
  
</feed>
