<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: associations | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/associations/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2016-05-03T10:10:40-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FIS Day19]]></title>
    <link href="http://adamjonas.com/blog/fis-day19/"/>
    <updated>2012-11-02T11:57:00-04:00</updated>
    <id>http://adamjonas.com/blog/fis-day19</id>
    <content type="html"><![CDATA[<h3>Virtual Attributes:</h3>

<p>There are two rails casts on this... <a href="http://railscasts.com/episodes/16-virtual-attributes-revised">#16</a> and <a href="http://railscasts.com/episodes/167-more-on-virtual-attributes">#167</a>.</p>

<h3>Rails Lecture</h3>

<p>the name attribute of the HTML determines how it is processed by the server</p>

<p>form_vars pass in the query string since it isn't in the</p>

<p>```ruby <a href="http://guides.rubyonrails.org/form_helpers.html#understanding-parameter-naming-conventions">Rack Does the Parsing</a>
Rack::Utils.parse_query "name=fred&amp;phone=0123456789"</p>

<h1>=> {"name"=>"fred", "phone"=>"0123456789"}</h1>

<p>```</p>

<p><code>ruby This is NOT mass assignment
def create
  @song = Song.new(params[:song].except(:artist_name))
  @song.artist_name = params[:song][:artist_name]
end
</code></p>

<h3>Attribute Accessbile</h3>

<ul>
<li>attr_protected is the opposite of attr_accessbile</li>
<li>attr_protected whitelists everything except the attributes that are explicitly whitelisted</li>
</ul>


<h3>Associations</h3>

<p>If it has a belongs_to -> you know it has a foreign_key that points to the table it belongs_to
If it has_many -> you know that that thing has a foreign_key that points to the parent table</p>

<p>```ruby
Song.all.collect{ |s| s.artist_name}.uniq.each do |a|
  artist = Artist.create(:name => a )
  Song.find_all_by_artist_name(a).each do |s|</p>

<pre><code>s.artist_id = a.id
s.save
</code></pre>

<p>  end
  #TODO: Refactor to use Song.update_all
end
```</p>

<p>expected Artist, but got String</p>

<p><code>ruby Assigning the artist to a song
m = Artist.create(:name =&gt; "Mike Jackson")
s.artist = m
s.save
</code></p>

<p>```ruby Use Build Not New
queen.songs.build
queen.songs.build(:name => "song name")</p>

<h1>to persist you can save queen OR you can save the song.</h1>

<p>mmm_bop.build_artist(:name => "Hanson")
```</p>

<p>has_many(name, options = {}, &amp;extension)
In the documentation the model names are replaced by the word collection. In the docs it shows all the methods that can be called on it. <a href="http://apidock.com/rails/ActiveRecord/Associations/ClassMethods/has_many">For example</a></p>

<ul>
<li>Note: collection is replaced with the symbol passed as the first argument, so has_many :clients would add among others clients.empty?.)</li>
</ul>


<blockquote><p>Build is to new, as create is to create</p></blockquote>

<ul>
<li>There is no Artist.build, but there is an Artist.create</li>
</ul>


<p>?? could you add a macro that ran a migration to add the id for the belongs_to table</p>

<h2>Seed Task</h2>

<p>The push method returns an array of all the objects in the array while the build method just returns that one song that you are building...</p>

<p>From the many it is songs.build and from the belongs it is song.build_artist</p>

<p>You can skip the save on the one to many save...</p>

<p>build is alias to new.</p>

<p>delete is for nullifying associations
destroy is for destroying objects</p>

<p>Look at end of file for clearing artists and songs.</p>

<p>```ruby Seed Task
desc "Create a bunch of seed data for artists and songs"</p>

<p>task :seed_artists_and_songs => [:environment, :clear_artists_and_songs] do
  # Build Song Off Artist
  # Given a Song called R.E.S.P.E.C.T
  # build the Aretha Franklin Artist</p>

<p>  s = Song.create(:name => "R.E.S.P.E.C.T")
  s.build_artist(:name => "Aretha Franklin")
  s.save</p>

<p>  #Create an Artist
  #Build a Song for that Artist
  #Save the Artist
  a = Artist.new
  a.songs.build(:name => "Natural Woman")
  a.save
  #from the many it is songs.build and from the belongs it is song.build_artist</p>

<p>  # Build a Song for that Artist
  # build song Natural Woman</p>

<p>  # Manually Create Artist Kanye West</p>

<p>  # Push a Song Onto an Artist
  # push a song onto Kanye West</p>

<p>  # Create Michael Jackson Artist
  # Make 3 Michael Jackson Songs
  # push all songs by Michael Jackson
  mike = Artist.create(:name => "MJ")
  mike.songs &lt;&lt; [Song.new, Song.new, Song.new]</p>

<p>  # Delete one michael song off of michael
  # Remove a Song from Artist
  mike.songs.delete(mike.songs.first) # this won't destroy the object, it will delete the association</p>

<p>end</p>

<p>task :clear_artists_and_songs => [:environment] do
  puts "Deleting all Artists and Songs...."</p>

<p>  Artist.delete_all
  Song.delete_all
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Buzz Word Alert: Polymorphic]]></title>
    <link href="http://adamjonas.com/blog/buzz-word-alert-polymorphic/"/>
    <updated>2012-07-20T17:57:00-04:00</updated>
    <id>http://adamjonas.com/blog/buzz-word-alert-polymorphic</id>
    <content type="html"><![CDATA[<h3>Polymorphism</h3>

<ul>
<li>Nouns are resources and polymorphism is "a geeky way of saying that different nouns can have the same verb applied to them." <a href="http://tomayko.com/writings/rest-to-my-wife">(how I explained REST to my wife)</a></li>
<li>"is the ability of objects belonging to different types to respond to method calls of the same name, each one according to an appropriate type-specific behaviour." (wikipedia)</li>
<li>is a language feature that allows the same function call to be associated with different definitions during the same execution, by delaying the binding of the call to run-time. <a href="http://cs.calvin.edu/curriculum/cs/214/adams/labs/10/">here</a></li>
<li>polymorphism  is  the  ability  of  one  method  to  have  different  behavior  depending  on  the  type  of  object  it  is  being  called  on  or  the  type  of  object  being  passed  as  a  parameter. <a href="http://courses.csail.mit.edu/iap/interview/Hacking_a_Google_Interview_Handout_1.pdf">From</a></li>
</ul>


<h3>Some Real Life Examples</h3>

<ul>
<li>depending on the argument that you send it, it has different behavior
when you send @mixtape it looks up:
<code>ruby
mixtape_path(@mixtape) #=&gt; '/mixtapes/1'
</code>
real life e.g.s
subway slot can accept a metrocard and a credit card-- depending on what you send it, it has differnt behavior
a vending machine accepts dollar bills and credit card. Depending on what you insert, it has different behavior.</li>
</ul>


<h3>Polymorphic Associations</h3>

<ul>
<li>in the <a href="http://guides.rubyonrails.org/association_basics.html#polymorphic-associations">guides</a> it states: "With polymorphic associations, a model can belong to more than one other model, on a single association."</li>
<li>You can think of a polymorphic belongs_to declaration as setting up an interface that any other model can use.</li>
</ul>


<p>As usual Ryan Bates to the rescue-- <a href="http://railscasts.com/episodes/154-polymorphic-association?view=comments">polymorphic association rails cast.</a></p>

<p>Imagine an event website. We want to add a comments section. How would be do this because comments would belong to either the photo, article, or event.
Without polymorphic associations we would probably try to create a model for each instance-- a photo comment, an article comment and an event comment. That's 3 models with the same data and behavior so we want to combine these into one generic comment model that can belong_to any of these other models.</p>

<p><code>ruby
rails generate scaffold comment content:text commentable_id:integer commentable_type:string
</code></p>

<p>A <em>polymorphic association</em> is an association that can belong_to many different models...</p>

<p><code>ruby Polymorphic Association
class Comment &lt; ActiveRecord::Base
  belongs_to :commentable, :polymorphic =&gt; true
end
</code>
The rails docs refer to the :as keyword parameter to has_one and has_many as specifying a “polymorphic interface.”</p>

<p>At the database level, the Comment table will have two columns for the association: commentable_type and commentable_id. <em>A composite foreign key.</em></p>

<p>To set up the other side of the association:
``` ruby
class Article &lt; ActiveRecord::Base
  has_many :comments, :as => :commentable #the :as => :commentable indicates the PolyMorph assoc
end</p>

<h1>similar code would be repeated for all of the associations-- in this case event &amp; photo</h1>

<p>```
So the polymorphic bit means that the type of thing you’re going to get back when you ask a Comment for its commentable data is unknown... it could be an article or it could be an event or it could be a photo. In dynamic Ruby land, Ruby terms, this means I don’t care what I sort of model I get when I ask a comment for its commentable data, as long as it goes quack I can treat it like it’s a duck.</p>

<p>Enter <em>interfaces</em>. Interfaces specify what I want the returned object to behave like, it could be a duck, or it could be a spaceship or maybe, just maybe, it could be commentable. In fact if you read though the ActiveRecord docs on polymorphic associations, you will find that “interface” is exactly what they call the parameter passed in the :as key of the params hash, and the first parameter to a polymorphic belongs_to association, and even the xxx_type and xxx_id columns in the database. This threw me quite a bit when I first looked at polymorphic associations, you have to declare that the association uses the commentable interface, but you don’t have a commentable model, or a commentable table, or a commentable anything for that matter. To my mind, "commentable" is the name of the interface that the comments all have to implement. It could specify that all of them must have a “next_comment” method, which will give me (surprise surprise) the next comment they produce. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">(Read more on this)</a></p>

<p>My comment model does not need to be changed when I add another commentable type. This is important. Very important! As soon as anyone with even a mild case of featuritus gets near your code they are going to want to add stuff, and more often that not, that will mean adding new classes. If adding new classes means adding new branches to all your conditional logic, you are in trouble. <a href="http://wildfalcon.com/archives/2008/04/30/polymorphic-associations-and-interfaces-in-rubyrails/">See here again</a></p>

<p>Once the associations are wired, how can we use this in the controller and views?
- For the most part, this can be treated like any other has_many association. e.g. can call article.comments to list all the comments of the article.
- A lot of confusion can arise if you are doing nested resources</p>

<p>Need to change the routes:
``` ruby
map.resources :articles, :has_many => :comments
map.resources :photos, :has_many => :comments
map.resources :events, :has_many => :comments</p>

<h1>i realize this isn't Rails 3.2 code...</h1>

<p>```</p>

<p>At the end of the comment controller, Ryan adds the find_commentable method:
``` ruby
private</p>

<p>def find_commentable
  params.each do |name, value|</p>

<pre><code>if name =~ /(.+)_id$/
  return $1.classify.constantize.find(value)
end
</code></pre>

<p>  end
  nil
end
```</p>

<h3>Beyond the rails cast</h3>

<p><a href="http://teachmetocode.com/articles/ruby-on-rails-what-are-polymorphic-associations/">Charles Max Wood's explanation</a></p>

<p>Polymorphic associations allow us to associate a single attribute of the class to any number of specified classes.
Charles suggest that you <a href="http://teachmetocode.com/articles/ruby-on-rails-polymorphic-associations-with-mixin-modules/">put your polymorphic associations and related functionality into mixin modules</a>.
<a href="http://www.youtube.com/watch?v=9NiCx1Lu-DY">Youtube Video</a>-
Polymorphic means that it can take different forms. A comment can belong_to a page or a post. Most devs name this ___able. e.g. for a comment it would be commentable. This just a convention.</p>

<p>On the has_many side this becomes a little muddy: if commentable can be a page or a post then a comment, it's going to go looking for a page ID on the comments table and it's not going to find it. So the solution is:
``` ruby
has_many :comments, :as => :commentable</p>

<h1>saying: i have many comments and the comments refer to me as commentable</h1>

<p>```
 If you have a belongs_to :commentable on your comment, you are going to expect it to have a commentable_id on the comments table (which it does!). But is that _id a post.id page.id? This is answers by having a commentable type column as well on the comments table-- it's a string column that stores the class name for whatever is associated there (i.e. post or page). So when you invoke joins or includes it has to go looking for the type column of commentable type.</p>

<p>Note: many to many polymorphic associations don't seem to work very well
There is a video on this <a href="http://www.youtube.com/watch?v=vEo6hmHTvS4">here</a>.</p>

<p><a href="http://robots.thoughtbot.com/post/159809241/whats-the-deal-with-rails-polymorphic-associations">The beginning of this is worth a read</a>... even if it's from 2006.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[association station]]></title>
    <link href="http://adamjonas.com/blog/association-station/"/>
    <updated>2012-07-20T17:30:00-04:00</updated>
    <id>http://adamjonas.com/blog/association-station</id>
    <content type="html"><![CDATA[<p>4.1.2.2 :class_name</p>

<blockquote><p>If the name of the other model cannot be derived from the association name, you can use the :class_name option to supply the model name. For example, if an order belongs to a customer, but the actual name of the model containing customers is Patron, you’d set things up this way:</p></blockquote>

<p><a href="http://guides.rubyonrails.org/association_basics.html">From the assoication guide</a>
<code>ruby
class Order &lt; ActiveRecord::Base
  belongs_to :customer, :class_name =&gt; "Patron"
end
</code></p>

<h3>One-to-many relationships</h3>

<blockquote><p>The most common relationship used when creating relational databases.  A row in a table in a database can be associated with one or (likely) more rows in another table.  An example of a one-to-many relationship is a single order has many items on that order.  And since relationships work both ways it is not uncommon to hear reference to many-to-one-relationships as well.</p></blockquote>

<ul>
<li>most common kind
<a href="http://www.maakal.com/maakalDB/ERD_Examples2.htm">e.g.</a></li>
</ul>


<h3>One-to-one relationship</h3>

<blockquote><p>A row in a table is associated to one and only one row in another table.  An example of a one-to-one relationship is a person can have one social security number and a social security number can only be assigned to one person.</p></blockquote>

<ul>
<li>In most cases there is no need for a one-to-one relationship as the contents of the two tables can be combined into one table.</li>
</ul>


<p><a href="http://www.maakal.com/maakalDB/ERD_Examples.htm">e.g.</a></p>

<h3>Many-to-many relationships</h3>

<blockquote><p>When one or more rows in a table are associated with one or more rows in another table.  An example of a many-to-many relationship is a table of customers can purchase many products and many customers can purchase a product.</p></blockquote>

<p><a href="http://help.filemaker.com/app/answers/detail/a_id/9922/~/understanding-and-creating-many-to-many-relationships-in-filemaker-pro">Source</a></p>

<h3>Self joins</h3>

<p>In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be modeled with self-joining associations:
```ruby
class Employee &lt; ActiveRecord::Base
  has_many :subordinates, :class_name => "Employee",</p>

<pre><code>:foreign_key =&gt; "manager_id"
</code></pre>

<p>  belongs_to :manager, :class_name => "Employee"
end
```
With this setup, you can retrieve @employee.subordinates and @employee.manager</p>

<p>There is another rails cast on <a href="http://railscasts.com/episodes/163-self-referential-association">self-referential-association</a>. Ryan Bates is amazing.</p>

<ul>
<li>Reading:
<a href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420">patterns of enterprise application architecture</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
