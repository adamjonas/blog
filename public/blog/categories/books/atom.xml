<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: books | Hack hack hack...]]></title>
  <link href="http://adamjonas.com/blog/categories/books/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2017-04-19T15:39:00-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Linux Works: What Every Superuser Should Know]]></title>
    <link href="http://adamjonas.com/blog/how-linux-works-what-every-superuser-should-know/"/>
    <updated>2017-04-05T12:13:00-04:00</updated>
    <id>http://adamjonas.com/blog/how-linux-works-what-every-superuser-should-know</id>
    <content type="html"><![CDATA[<h2>Posix shell and Utilities</h2>

<ul>
<li>from <a href="http://shellhaters.org/talk">Shell Hater's handbook with Ryan Tomayko</a></li>
<li><a href="http://shellhaters.org/">posix docs</a></li>
</ul>


<h2>fork() &amp; exec()</h2>

<ul>
<li>When running exec() programs, you are forking a shell and running it on that</li>
<li><a href="https://www.bottomupcs.com/fork_and_exec.xhtml">Fork and exec</a></li>
<li><a href="http://askubuntu.com/questions/428458/why-do-shells-call-fork">Why do shells call fork?</a>

<ul>
<li>exec can only run one thing. So shell creates the child shell runs exec and then returns.</li>
</ul>
</li>
<li>fork() clones the current process, creating an identical child. exec() loads a new program into the current process, replacing the existing one. <a href="http://unix.stackexchange.com/questions/179604/how-do-fork-and-exec-work">From</a></li>
</ul>


<h2>Time slice</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Preemption_(computing">time slice</a>#Time_slice) managed by the scheduler of the CPU. Time slices are <a href="https://superuser.com/a/684394">variable</a> -> need this to keep the illusion of concurrency(having multiple processes at the same time) and multi-tasking, but with one core there is no possibility of doing paralellism.</li>
</ul>


<h2>Builtins</h2>

<ul>
<li>(wikipedia)[https://en.wikipedia.org/wiki/Shell_builtin]

<ul>
<li>executed directly in the shell itself, instead of an external executable program which the shell would load and execute.</li>
<li>Shell builtins work significantly faster than external programs, because there is no program loading overhead.</li>
<li>most notable example is <code>cd</code></li>
<li><code>cd</code> has to be a builtin because the shell itself needs to change its "cwd" - current working directory - not a sub-process. The goal of "cd" is to change the current working directory of the shell itself, and that can't be accomplished from a child process without a lot of special hackery which would end up being more complex than the builtin. <a href="https://www.quora.com/Unix-Why-is-cd-a-built-in-command-in-the-shell-and-not-an-executable-program-like-the-command-ls">from</a>

<ul>
<li>great explanation on how it came to be with a quote from <a href="http://unix.stackexchange.com/a/38819">Dennis Ritchie</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Memory Management</h2>

<ul>
<li>swap -> using the hard disk as RAM</li>
<li>A <a href="https://en.wikipedia.org/wiki/Page_table">page table</a> is the data structure used by a virtual memory system in a computer operating system to store the mapping between virtual addresses and physical addresses. Virtual addresses are used by the accessing process, while physical addresses are used by the hardware, or more specifically, by the RAM subsystem.</li>
</ul>


<h2>Tree</h2>

<ul>
<li><a href="https://superuser.com/questions/359723/mac-os-x-equivalent-of-the-ubuntu-tree-command">tree</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Patterns of Enterprise Application Architecture]]></title>
    <link href="http://adamjonas.com/blog/patterns-of-enterprise-application-architecture/"/>
    <updated>2016-05-30T17:08:00-04:00</updated>
    <id>http://adamjonas.com/blog/patterns-of-enterprise-application-architecture</id>
    <content type="html"><![CDATA[<h2>Introduction:</h2>

<blockquote><p>“Architecture” is a term that lots of people try to define, with little agree- ment. There are two common elements: One is the highest-level breakdown of a system into its parts; the other, decisions that are hard to change. It’s also increasingly realized that there isn’t just one way to state a system’s architec- ture; rather, there are multiple architectures in a system, and the view of what is architecturally significant is one that can change over a system’s lifetime. p. 1.</p>

<p>The subjectivity comes in here as well because, if you find that something is easier to change than you once thought, then it’s no longer architectural. In the end architecture boils down to the important stuff—whatever that is. p. 2</p>

<p><em>Responsiveness</em> is about how quickly the system acknowledges a request as opposed to processing it. This is important in many systems because users may become frustrated if a system has low responsiveness, even if its response time is good. If your system waits during the whole request, then your responsiveness and response time are the same. However, if you indicate that you’ve received the request before you complete, then your responsiveness is better. Providing a progress bar during a file copy improves the responsiveness of your user inter- face, even though it doesn’t improve response time. p. 7</p></blockquote>

<h3>Patterns</h3>

<blockquote><p>There’s no generally accepted definition of a pattern, but perhaps the best place to start is Christopher Alexander, an inspiration for many pattern enthusi- asts: “Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice” [Alexander et al.]. Alexander is an architect, so he was talking about buildings, but the definition works pretty nicely for software as well. The focus of the pattern is a particular solution, one that’s both com- mon and effective in dealing with one or more recurring problems. Another way of looking at it is that a pattern is a chunk of advice and the art of creating patterns is to divide up many pieces of advice into relatively independent chunks so that you can refer to them and discuss them more or less separately. p. 9</p></blockquote>

<h2>Making a choice</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growing Object-Oriented Software, Guided By Tests]]></title>
    <link href="http://adamjonas.com/blog/growing-object-oriented-software-guided-by-tests/"/>
    <updated>2016-05-28T16:51:00-04:00</updated>
    <id>http://adamjonas.com/blog/growing-object-oriented-software-guided-by-tests</id>
    <content type="html"><![CDATA[<h2>Object-Oriented Style</h2>

<blockquote><p>We value code that is easy to maintain over code that is easy to write. Implementing a feature in the most direct way can damage the maintainability of the system, for example by making the code difficult to understand or by introducing hidden dependencies between components. Balancing immediate and longer-term concerns is often tricky, but we’ve seen too many teams that can no longer deliver because their system is too brittle. p. 47</p>

<p>Encapsulation and Information Hiding
  We want to be careful with the distinction between "encapsulation" and "information
hiding." The terms are often used interchangeably but actually refer to two separate,
and largely orthogonal, qualities:
  Encapsulation
  Ensures that the behavior of an object can only be affected through its API.It lets us control how much a change to one object will impact other parts of the system by ensuring that there are no unexpected dependencies between
unrelated components.</p></blockquote>

<p>  Information hiding
  Conceals how an object implements its functionality behind the abstraction of its API. It lets us work with higher abstractions by ignoring lower-level details that are unrelated to the task at hand. p. 49</p>

<blockquote><p>Our heuristic is that we should be able to describe what an object does without using any conjunctions (“and,” “or”). If we find ourselves adding clauses to the description, then the object probably should be broken up into collaborating objects, usually one for each clause. p. 52</p></blockquote>

<p>Context Independence</p>

<blockquote><p>While the “composite simpler than the sum of its parts” rule helps us decide whether an object hides enough information, the “context independence” rule helps us decide whether an object hides too much or hides the wrong information. p.54</p></blockquote>

<h2>Achieving Object-Oriented Design</h2>

<blockquote><p>Interface and Protocol
Steve heard this useful distinction in a conference talk: an interface describes whether two components will fit together, while a protocol describes whether they <strong>will work</strong> together. p. 58</p>

<p>Kernighan and Plauger attribute the idea of pipes to Douglas McIlroy, who wrote a memo in 1964 suggesting the metaphor of data passing through a segmented garden hose. It’s currently available at <a href="ttp://plan9.bell-labs.com/who/dmr/mdmpipe.pdf">http://plan9.bell-labs.com/who/dmr/mdmpipe.pdf</a>. p. 66</p></blockquote>

<h2>The Sniper Makes a Bid</h2>

<blockquote><p>Defer Decisions
There’s a technique we’ve used a couple of times now, which is to introduce a null implementation of a method (or even a type) to get us through the next step. This helps us focus on the immediate task without getting dragged into thinking about the next significant chunk of functionality. The null Auction, for example, allowed us to plug in a new relationship we’d discovered in a unit test without getting pulled into messaging issues. That, in turn, meant we could stop and think about the dependencies between our objects without the pressure of having a broken compilation. p. 136</p>

<p><strong>When the facts change, I change my mind. What do you do, sir?</strong>
  —John Maynard Keynes p. 172</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four - Observer and Mediator Pattern]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-observer-and-mediator-pattern/"/>
    <updated>2016-03-16T13:32:00-04:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-observer-and-mediator-pattern</id>
    <content type="html"><![CDATA[<h2>Observer</h2>

<ul>
<li>subject is a logical place to keep track of the collection of the observers

<ul>
<li>the upside is the observers needing to check with the subject via something like long-polling versus the subject notifying the owners</li>
</ul>
</li>
<li>ActiveRecord before_actions and after_actions are a ruby implementation of the observer pattern</li>
<li>How does JS does this?

<ul>
<li>functions are first class object, easy to pass around</li>
</ul>
</li>
</ul>


<h2>Mediator</h2>

<ul>
<li>what's the difference between mediator and observer

<ul>
<li>Define an object that encapsulates how a set of objects interact.</li>
<li>Mediator is a little more specific, it avoids having classes communicate directly but instead through a mediator. This helps the Single Responsibility principle by allowing communication to be offloaded to a class that just handles that.</li>
</ul>
</li>
<li>replaces many to many interactions with one to many interactions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Proxy and adapter pattern]]></title>
    <link href="http://adamjonas.com/blog/proxy-and-adapter-pattern/"/>
    <updated>2016-03-09T13:10:00-05:00</updated>
    <id>http://adamjonas.com/blog/proxy-and-adapter-pattern</id>
    <content type="html"><![CDATA[<h2>Proxy</h2>

<ul>
<li>reverse proxies</li>
<li>virtual proxy: creates expensive objects on demand. the worker box maybe?

<ul>
<li>infinite scroll or pagination (these objects exist in Octokit, where there are objects as placeholders but it hasn't acutally fetched the data)</li>
<li>memoization example in the ruby boook</li>
<li><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html">collection proxy</a></li>
</ul>
</li>
</ul>


<h2>Adapter (aka wrapper)</h2>

<ul>
<li>Fog: cloud storage</li>
<li>ActiveRecord</li>
<li>OctokitWrapper is more of a decorator because it adds additional implementation on top of Octokit</li>
<li>Gateway pattern is an adapter specifically created to talk to external services</li>
<li>HierarchyBuilder is the adapter</li>
<li>The key difference between bridge and apater lies in their intents.

<ul>
<li>Adapter focuses on resolving incompatibilities between two existing interfaces. Bridge, on the other hand, bridges an abstraction and its (potentially numerous) implementations.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
