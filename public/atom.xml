<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://www.adamjonas.com/atom.xml" rel="self"/>
  <link href="http://www.adamjonas.com/"/>
  <updated>2015-07-08T12:31:51-04:00</updated>
  <id>http://www.adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[how the web works]]></title>
    <link href="http://www.adamjonas.com/blog/how-the-web-works/"/>
    <updated>2015-07-08T12:20:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/how-the-web-works</id>
    <content type="html"><![CDATA[<h2>learn co</h2>

<ul>
<li>get IP address for server</li>
<li>assemble http request, sends an ack</li>
<li>open a tcp connection on 80 (or 443 for SSL)</li>
<li>tcp port established between user and host (over 1024)</li>
<li>ssl negotiation, user provides public key and the host provides its public key we validate based on a cert provider and then we are provided a symetric key that we use with that site going forward</li>
<li>nat - network address translation</li>
<li>GET HTTP request</li>
</ul>


<h2>On the server</h2>

<ul>
<li>HA proxy (ssl negotiation, load balancing) (we could replace this with nginx)</li>
<li>apache (speaks http, this is the web server)</li>
<li>phusion passenger (the workers that enable concurrancy)</li>
<li>hit the routes file</li>
</ul>


<h2>LB01</h2>

<ul>
<li>ubuntu 14.04 (LTS)</li>
<li>HA proxyd (port 443 -d SSL only)</li>
<li>sshd (port 22) -> run commands remotely (ssl encrypted)</li>
</ul>


<h2>IB03</h2>

<ul>
<li>apache, spawns passenger pushion</li>
<li>passenger spawns 5 wokers

<ul>
<li>takes the request and turns it into a rack ruby object</li>
</ul>
</li>
</ul>


<h2>NFS - Network file system</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Innovator's Dilemma]]></title>
    <link href="http://www.adamjonas.com/blog/innovators-dilemma/"/>
    <updated>2015-06-14T10:43:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/innovators-dilemma</id>
    <content type="html"><![CDATA[<h2>Sustaining v Disruptive Technologies</h2>

<ul>
<li>sustaining tech are improvements that sustain a company&#8217;s focus, goals, and customers.</li>
</ul>


<h2>Distruptive Products</h2>

<ul>
<li>Generally these products underperform establish products in mainstream markets.</li>
<li>Cheaper, simpler, smaller, more convenient. (Dimensions: functionality, reliability, convenience, price)

<ul>
<li>The attributes that often make the distruptive technology worthless in mainstream markets often become strong selling points in emerging markets.</li>
</ul>
</li>
<li>Do not improve the focus of the company. A market must be developed and new customers found.

<ul>
<li>Ignore the mainstream market. Find a market that values the disadvantages of the distruptive technology.</li>
</ul>
</li>
<li>Neither the firm nor the customers know of distruptive tech can be used.</li>
<li>managers need to plan to learn and discover, not plan and execute bc markets are unknowable.</li>
<li>cannot rely on new breakthrough technology, it is usually combining existing tech in a new way.</li>
</ul>


<h2>Allocating Resources</h2>

<ul>
<li><p>Being a follower in sustaining technologies is a viable and possibly desirable strategy, but leadership in disruptive technology creates enormous value. (Ch 6)</p></li>
<li><p>Match the size of the organization to the size of the market. Implant projects aimed at commercializing disruptive innovations small enough to get excited about small market opportunities. (Ch 6)</p>

<ul>
<li>Johnson and Johnson is comprises of 160 automonous companies each of which can introduce distuptive products.</li>
</ul>
</li>
<li><p>small markets don&#8217;t solve growth needs of big companies. For disruptive technologies, markets are unknowable.</p></li>
<li><p>look at the performance improvement of new technology. If it is growing faster than market performance demand, then it can be distruptive (it will eventually intersect the market need curve). (Ch 10)</p></li>
</ul>


<h2>Summary</h2>

<ul>
<li>Managing innovation is a mirror image of managing the resource allocation process.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stemming and faceted search]]></title>
    <link href="http://www.adamjonas.com/blog/stemming-and-faceted-search/"/>
    <updated>2015-06-12T09:32:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/stemming-and-faceted-search</id>
    <content type="html"><![CDATA[<h2>Faceted Search</h2>

<p>Search of specific facets like a brand or size for a show search. These are limited set of values, not like a username or ID which could be anything. It&#8217;s like a taxomony search.</p>

<p><a href="http://en.wikipedia.org/wiki/Faceted_search">Wikipedia</a></p>

<h2>Stemming</h2>

<p>Reduces the word to its root. So &#8216;fishes&#8217; and &#8216;fishing&#8217; to &#8216;fish.&#8217;</p>

<p>This algorithm really hasn&#8217;t been around that long. First proposed in &#8216;68 it gained popularity in the 80s.</p>

<p><a href="http://en.wikipedia.org/wiki/Stemming">Wikipedia</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Warren Buffet Bio]]></title>
    <link href="http://www.adamjonas.com/blog/warren-buffet-bio/"/>
    <updated>2015-03-21T13:30:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/warren-buffet-bio</id>
    <content type="html"><![CDATA[<ul>
<li><p>The cornerstone of Buffet&#8217;s investment philiosphy: Never count on making a good sale. Have a purchase price be so attractive that a mediocre sale gives good results.</p></li>
<li><p>Book value is equal to that capital that have gone <em>into</em> a business, plus whatever profits been retained. An investoris concerned with how much can be taken out in the future; that is what determines the company&#8217;s worth or <em>intrinsic value</em> as Buffet would call it. Book value is blind to intangibles like brand and so there are opportunities to take aadvantage of the  gap between the discepency of the book value and the instrinsic value.</p></li>
<li><p>Also read Benjamin Graham, Charlie Munger, &amp; Philip Fisher.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[omniauth tomfoolery]]></title>
    <link href="http://www.adamjonas.com/blog/omniauth-tomfoolery/"/>
    <updated>2015-03-04T18:01:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/omniauth-tomfoolery</id>
    <content type="html"><![CDATA[<p>Problem: Want to redirect a user who has yet to sign up back to our site after joining Github. Github does not support a url other than login and if you were to click on sign up from there, you would lose the query string parameters.</p>

<p>Resources:
<a href="https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview#cannot-load-strategy-class">Explicitly set strategy class</a></p>

<p><a href="https://github.com/intridea/omniauth/wiki/Strategy-Contribution-Guide#defining-the-request-phase">Strategy Contribution Guide</a></p>

<p><a href="https://github.com/intridea/omniauth-oauth/blob/43008e42b257d9b7c0b98122cf03ce14b021d782/lib/omniauth/strategies/oauth.rb">oauth strategy</a></p>

<p>I ended up getting the param through, but github noticed and closed the loop. Sad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Working in Professional Baseball Taught Me about Web Development]]></title>
    <link href="http://www.adamjonas.com/blog/what-working-in-professional-baseball-taught-me-about-web-development/"/>
    <updated>2015-01-19T15:32:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/what-working-in-professional-baseball-taught-me-about-web-development</id>
    <content type="html"><![CDATA[<p>Before I was a web developer, I spent my time on baseball fields helping teenagers realize their ultimate dream of playing in the Major Leagues. All of them had talent. Somewhere, someone had seen glimpses of it. Cultivating that talent and turning their potential into performance was the primary purpose of my job. In the vast majority of cases we failed. Now, a few years removed from the game, most of the players I worked with are out of professional baseball. Those who did succeed, found a way to endure the grind and adjusted to the game’s mental and emotional demands.</p>

<p>In 2012, I hit the reset button on my career and became a web developer. I thought I would be leaving baseball forever. However, I found that many of the same traits I saw in successful ball players, even those with very little formal schooling, were some of the very same characteristics I observed in talented engineers. The inability to manage failure, maintain consistency, and learn how to be a professional shattered the dreams of the vast majority players I worked with because they were skills that were so difficult to master.</p>

<p>When I see one of them on TV, it’s hard to not recall the younger, yet unmolded version. It is why I was never the best scout. The baseball scout’s job is to imagine the possibilities. They envision a future version of a gangly youth whose body and mind has matured and whose flaws have been smoothed away to the point they can perform in the Major Leagues. It is a hard job and one that I wish existed in other industries.</p>

<h2>Facing failure</h2>

<p>Successful people, in any field, often struggle with making mistakes. This isn’t surprising, we are wired for bad news. We internalize it. We personalize it. Repeated failure is exhausting. Ball players, whose hitting success rate is at best around 30% are forced to cope. Failure is inherently part of the game.</p>

<p>Resilient players’ confidences seem immune to repeated failure. In fact, failure appears to be inextricably linked to their progress. This makes sense. We improve fastest based on negative feedback. The great thing about that big red error message is that it leaves an obvious clue. Sometimes these hints are more obscure than others, but bugs and errors inform us where to look and where to improve.</p>

<p>Getting repeatedly beaten by the same pitch provides feedback on where hitters need to improve in the same way that a familiar error in our terminal window instructs us where in the code to start looking for our mistake. As humans we learn through repetition and experience. The goal is to not getting beaten again by the same pitch or the same problem.</p>

<p>When I first started learning to program, I focused on never repeating the same mistake twice. This, of course, is impossible but I recorded most my thoughts and posted it online so that I had a searchable collection of my mistakes. The frequency of my posts have waned, but I still find myself searching my blog archives when I know I’ve solved a similar problem in the past. While it was rare to see ball players jot down notes on opponents, most hitting savants have the ability recall previous pitch sequences from past at-bats. Either way, the secret to coping with failure is to reframe it as valuable feedback to be used in the future.</p>

<h2>Consistency</h2>

<p>As developers, we know that consistent performance is important. We construct our dependencies on the most stable parts of our applications. The same goes for managers: when Sarah demonstrates she can be depended on to meet deadlines on a day-to-day, week-to-week, sprint-to-sprint or quarter-to-quarter basis, Sarah can be relied on to build the feature to satisfy the high priority business objective.</p>

<p>Consistency creates the opportunity for measurement. Like the measurement of feature velocity based on a set period of time, comparison of player’s abilities would be worthless without a standard 162 game schedule where the participants play nine innings with nine players on the field. Without a level playing field, comparisons are no longer valid and people can get really upset (see baseball and steroids).</p>

<p>Consistency is difficult because we are wired to break free from it. We are not as perfectly repeatable as the scripts we write. Our brains thrive on novelty. The day-to-day becomes mundane without it. We seek out adventure and variety. We create drama where there is none. We endeavor to learn new things.</p>

<p>But mostly being consistent is just showing up. Being there when products ship and stuff goes down. Career defining highlights are created when people are in the right place at the right time. Crashes on the production server and DEFCON 1 bugs are inevitable but these panic moments create opportunities. Under pressure, acting as you always do makes you a hero.</p>

<p>Derek Jeter’s lifetime batting average was .310. A consummate professional, he hit .308 in the playoffs. Just being yourself when the pressure is on and more eyes are on you makes it seem like you are rising to the occasion. No one is perfect, but bringing your best everyday provides predictability to our human unpredictability and separates the amateurs from the pros.</p>

<h2>Professionalism</h2>

<p>Professional baseball is a child’s game played by overgrown men who make millions of dollars. Make no mistake about it, baseball is a grueling sport. The schedule is relentless. Players arrive at the stadium five-plus hours before the first pitch to weight train, stretch, hit, throw, review scouting reports, etc.</p>

<p>After a three hour game, players are expected to hold court in front of their lockers and answer questions that essentially boil down to, “Tell us about your glaring mistake that you made in front of thousands of people across America.” Each major league team plays 162 games in about 180 days &#8211; not to mention the the month of spring training before the season starts and, if they are lucky, a month of postseason games. Eighty-one of these games in other cities meaning players are switching time zones for weeks on end. The truly blessed ones do this for 20+ years. What the casual fan sees of a player on any given night is the result of thousands of hours of refining subtle movements through exhaustive repetition.</p>

<p>And while we developers don’t enjoy the fame and fortune of Major Leaguers, we get to solve the worlds’ hardest puzzles. The impact of our code has touched the lives of nearly every human on the planet. The drudgery of implementing the vision of others is offset by the natural builder’s high.</p>

<p>Hacker News is littered with discussion on how writing software can crush your soul, but for the lucky ones, the “job” retains its joy. Despite the jeering fans and elusive bugs, there are a blessed few who simply love what they do.</p>

<h2>The Same But Different</h2>

<p>Of course, there are stark differences between baseball and software engineering. Software has been in the hands of laymen for less than a generation and baseball has remained unchanged since before the Civil War. While software’s impact continues to accelerate, we should pause to take breathers and remember that what is old becomes new again. There are lessons to learn everywhere we look and baseball has proven no different for me.</p>

<p>I love what I do. I’ve never been as challenged as when I’m muddling to make sense of a new concept or totally lost in a self-created code mess. The wins and losses I’ve experienced as a developer are like nothing else I’ve experienced as an athlete or a coach. While I’m still a relatively new programmer, my experiences in baseball have transferred as valuable lessons on coping with failures, reliability, and professionalism.</p>

<p>Not all that long ago my work day consisted of spotting the subtle deficiencies in a pitcher’s delivery and the sound of a shortstop’s feet as he ran a 60 yard dash, but when I watch how a junior dev deftly uses her VIM shortcuts or the ease of which she writes a complex SQL query, I’m reminded it’s not so different after all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[management articles]]></title>
    <link href="http://www.adamjonas.com/blog/management-articles/"/>
    <updated>2014-12-02T14:20:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/management-articles</id>
    <content type="html"><![CDATA[<h2>Etsy</h2>

<ul>
<li><a href="http://www.businessinsider.com/a-company-with-no-hierarchy-that-makes-more-money-per-employee-than-google-amazon-or-microsoft-2012-4">compensation by peer review</a> is how valve does it</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[distributed teams]]></title>
    <link href="http://www.adamjonas.com/blog/distributed-teams/"/>
    <updated>2014-12-02T14:13:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/distributed-teams</id>
    <content type="html"><![CDATA[<ul>
<li>Interview with <a href="https://gigaom.com/2012/03/26/tales-from-the-trenches-github/">Chris Wanstrath</a>, Github</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kris Gale]]></title>
    <link href="http://www.adamjonas.com/blog/kris-gale/"/>
    <updated>2014-12-02T14:03:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/kris-gale</id>
    <content type="html"><![CDATA[<p>This was a <a href="http://research.gigaom.com/2013/11/the-new-visionaries-kris-gale/">great interview</a>.</p>

<h2><a href="http://www.theresponsiveorg.com/manifesto">Responsive Organization</a></h2>

<h2>Evaluation is a busted idea</h2>

<ul>
<li><p>&#8220;It’s my opinion that the big company evaluation systems we all think of have been broken for a very long time. Long before Drive came out, W. Edwards Deming was practically yelling at the world that performance evaluations were a busted idea.&#8221;</p></li>
<li><p>&#8220;Remember that annual bonus money is not free money that comes into existence when a company decides to give bonuses. Bonuses are, effectively, a group of people agreeing to give up a percentage of their salary for their managers to redistribute to the people those managers arbitrarily select. What sane group of people would agree to that?&#8221;</p></li>
<li><p>&#8220;Bonus-tied reviews by the management layer reduce an organization’s ability to change direction, because it incentivizes people to deliver what they’ve committed to, even as new information suggests different work would be more effective.&#8221;</p></li>
<li><p>&#8220;It’s interesting that everyone asks about the evaluation process. I think that’s a really strong signal that most engineers don’t work in structures or environments that provide enough transparency.&#8221;</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oren Ellenbogen]]></title>
    <link href="http://www.adamjonas.com/blog/oren-ellenbogen/"/>
    <updated>2014-12-02T13:48:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/oren-ellenbogen</id>
    <content type="html"><![CDATA[<p>From the author of <a href="http://leadingsnowflakes.com/">leading snowflakes</a>.</p>

<h2>Q &amp; A</h2>

<p>  Q: do you insulate devs from business objectives so they can concentrate on their task or let them understand the big picture so that they buy in?</p>

<p>  A: Juniors need to be execution machines. KPIs filter down to the technical lead and engineering leads.</p>

<p>  Q: How would you approach evaluations in general?</p>

<p>  A: Need to let go of the idea that evaluations are purely objective. You want them to fit culturally and grow. If they are accomplishing these goals they should be rewarded and if not are way off, they should be fired.</p>

<h2>Notes from discussion with Oren</h2>

<ul>
<li><p>Learn from your peers:</p>

<ul>
<li>Make a list of ppl that do things well. Pick their brain on it.</li>
</ul>
</li>
<li><p>Expectations</p>

<ul>
<li>What are must have qualites and what are deal breakers?</li>
<li>What makes your tick?

<ul>
<li>I work best when___</li>
<li>It annoys me when ___</li>
</ul>
</li>
<li>write down a charge&#8217;s 6 month performance today

<ul>
<li>if you really have a solid foundation of trust, share it with them</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2>Own thoughts</h2>

<p>  Personal preferences are based on YOUR preferences &#8211; I had misinteerpreted what they represented in the book. But why should your charges adjust to you, rather than the other way around?</p>

<p>  The book&#8217;s perspective seems to be for teams little bit larger team than what we have (currently 7) - so I&#8217;m interested in your thoughts on goals for small teams before WE REALLY DON&#8217;T NEED A REPORTING STRUCTURE when things are pretty messy still and people have to do a lot of things (like a startup), but we still want to give inexperienced developers some structure.</p>

<pre><code>- baseline expectations - which we have done and they are soft (passion, 'getting it done', making the 'right' technical decision) - so they are subjective
- Personal expectations - technical risks, technical growth
</code></pre>

<p>  This is all pretty soft and that means that performance is pretty subjective which makes it pretty hard to align goals with our future direction or OKRs.</p>

<p>  site speed? user acquisition? We aren&#8217;t close to that.</p>

<p>  If you could pick one and only one metric to systematically increase over time, what metric would have the greatest and most sustainable impact on you and your team’s effectiveness?
  But these quantitative number really can&#8217;t be all of it&#8230;</p>

<p>  Helping others, code review, their code is breaking seem like more appropriate and directly pertinent to a dev&#8217;s day to day performance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[circle ci debugging]]></title>
    <link href="http://www.adamjonas.com/blog/circle-ci-debugging/"/>
    <updated>2014-11-26T15:02:00-05:00</updated>
    <id>http://www.adamjonas.com/blog/circle-ci-debugging</id>
    <content type="html"><![CDATA[<p>Chasing a crazy bug on circle ci. Passes locally. Used VNC to drop into circle ci to try to track it down. Really cool to get into that box but it didn&#8217;t shed any light on the error.</p>

<p>The next step was to capture screenshots of what was going on. <a href="https://github.com/mattheworiordan/capybara-screenshot">The capybara-screenshot gem</a> was a perfect fit but the screen shot was not showing the element actually being tested. For some reason it just wasn&#8217;t being displayed. It clicked that the window width was at tablet size meaning the element was being hidden by a media query. Shit.</p>

<p>Resolution:</p>

<ul>
<li><a href="http://yizeng.me/2014/02/23/how-to-get-window-size-resize-or-maximize-window-using-selenium-webdriver/#ruby-example">Resizing a window to resize</a></li>
<li><a href="https://code.google.com/p/selenium/wiki/RubyBindings">Selenium Ruby Bindings</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[polymorphic brain hurt]]></title>
    <link href="http://www.adamjonas.com/blog/polymorphic-brain-hurt/"/>
    <updated>2014-08-21T17:38:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/polymorphic-brain-hurt</id>
    <content type="html"><![CDATA[<h2>Polymorphic association from parent to child</h2>

<p>So <a href="http://blog.hasmanythrough.com/2006/4/3/polymorphic-through">this</a> succinctly summed up my issue.</p>

<h2>Deprecated conditions in rails 4</h2>

<p><code>Deprecation warning when using has_many :through :uniq in Rails 4</code></p>

<p>Then once I did get it working with:</p>

<figure class='code'><figcaption><span>Conditions Refactor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lesson model</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:readmes</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:lesson_contents</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:readme</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;lesson_contents.content_type = &#39;Readme&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:labs</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:lesson_contents</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:lab</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="s2">&quot;lesson_contents.content_type = &#39;Lab&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># stabby lambda</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:readmes</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;content_type = &#39;Readme&#39;&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'>    <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:lesson_contents</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:readme</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:labs</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;content_type = &#39;Lab&#39;&quot;</span><span class="p">)</span> <span class="p">},</span> <span class="ss">:through</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="ss">:lesson_contents</span><span class="p">,</span> <span class="ss">:source</span> <span class="o">=&gt;</span> <span class="ss">:lab</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/a/16702101/1496757">Hat Tip</a></p>

<h2>Polymorphic Migration</h2>

<figure class='code'><figcaption><span>Creating a [polymorphic migration](http://stackoverflow.com/a/5534614/1496757)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AddImageableToProducts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="n">change_table</span> <span class="ss">:products</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">references</span> <span class="ss">:imageable</span><span class="p">,</span> <span class="ss">:polymorphic</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM shortcuts]]></title>
    <link href="http://www.adamjonas.com/blog/vim-shortcuts/"/>
    <updated>2014-08-05T10:53:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/vim-shortcuts</id>
    <content type="html"><![CDATA[<h3>File Search</h3>

<ul>
<li>cntl + p => file search</li>
</ul>


<h3>Nerd Tree</h3>

<ul>
<li><code>go</code> => preview pane</li>
</ul>


<h3>Run the specs</h3>

<ul>
<li><code>\r</code> runs the closest spec</li>
<li><code>\R</code> runs the whole spec suite</li>
</ul>


<h3>cmd + shift + d</h3>

<ul>
<li><code>control + n</code></li>
</ul>


<h3>vimium for life</h3>

<ul>
<li><code>\\f</code> + character you are looking for</li>
<li><code>\\w</code> + word</li>
<li><code>\\e</code> goes to end of words</li>
<li>you get it</li>
</ul>


<h3>Go to line</h3>

<ul>
<li><code>line number + G</code></li>
</ul>


<h3>Tab in or out</h3>

<ul>
<li><code>&gt;&gt;</code> &amp; <code>&lt;&lt;</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expect]]></title>
    <link href="http://www.adamjonas.com/blog/expect/"/>
    <updated>2014-07-30T11:11:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/expect</id>
    <content type="html"><![CDATA[<h3>Intro commands</h3>

<ul>
<li><a href="ftp://ftp.sunet.se/pub/lang/tcl/expect/doc/90min-intro-talk.pdf">summary of commands</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[strace]]></title>
    <link href="http://www.adamjonas.com/blog/strace/"/>
    <updated>2014-07-25T13:04:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/strace</id>
    <content type="html"><![CDATA[<h3>Start here:</h3>

<ul>
<li>Greg Price’s excellent blog post <a href="https://blogs.oracle.com/ksplice/entry/strace_the_sysadmin_s_microscope">Strace – The Sysadmin’s Microscope</a>.</li>
<li><a href="http://jvns.ca/blog/categories/strace/">Julia Evans</a> has a lot too.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro to Docker]]></title>
    <link href="http://www.adamjonas.com/blog/intro-to-docker/"/>
    <updated>2014-07-25T12:49:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/intro-to-docker</id>
    <content type="html"><![CDATA[<h3>Docker API</h3>

<ul>
<li><a href="https://github.com/swipely/docker-api">Checkout</a></li>
</ul>


<h3>Relevant Docker Images</h3>

<ul>
<li><a href="https://github.com/progrium/dokku">dokku</a></li>
</ul>


<h3>Pups</h3>

<ul>
<li><a href="https://github.com/samsaffron/pups">pups</a> is a small library that allows you to automate the process of creating Unix images</li>
</ul>


<h3>Deployments</h3>

<ul>
<li><a href="https://coreos.com/">Core OS</a></li>
</ul>


<h3>Discourse on docker</h3>

<ul>
<li><a href="http://samsaffron.com/archive/2013/11/07/discourse-in-a-docker-container">Sam Saffron explains</a></li>
</ul>


<h3>haproxy</h3>

<ul>
<li><a href="http://www.haproxy.org/">High Performance Load Balancer</a></li>
</ul>


<h3>Testing</h3>

<ul>
<li>testing docker seems tough. Puppet Labs <a href="https://github.com/puppetlabs/beaker/blob/master/spec/beaker/hypervisor/docker_spec.rb">gave it a run</a>.</li>
</ul>


<h3>Intro video</h3>

<ul>
<li><a href="https://www.youtube.com/watch?v=Q5POuMHxW-0">Founder of Docker Inc</a></li>
</ul>


<h3>Commands</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -p 3000:3000 -t -i dockerregistry.flatironschool.com/ironboard /bin/bash
</span><span class='line'>source /etc/profile.d/rvm.sh 
</span><span class='line'>rvm reload
</span><span class='line'>vi ironboard/config/database.yml
</span><span class='line'>cd ironboard/
</span><span class='line'>service postgresql start
</span><span class='line'>rake db:migrate
</span><span class='line'>
</span><span class='line'>docker build -t dockerregistry.flatironschool.com/ironboard .
</span><span class='line'>docker run -d -p 3000:3000 dockerregistry.flatironschool.com/ironboard</span></code></pre></td></tr></table></div></figure>


<h3>Notes from <a href="http://vimeo.com/95932458">Docker: The Revolution Will Be Containerized</a></h3>

<ul>
<li>Containers are just other Linux processes on the host not virtualized calls</li>
<li>The only performance decrease you see is Linux asking whether it is allowed to access this file - share a kernel with the host</li>
<li><p>Not nested virtualization</p>

<ul>
<li>this would be slow</li>
<li>no device emulation, which makes it faster</li>
</ul>
</li>
<li><p>Can be used as a light weight vm but that&#8217;s not the only way</p></li>
<li><p><strong><code>Chroot</code> on steroids?</strong></p>

<ul>
<li><p>(From <a href="http://en.wikipedia.org/wiki/Chroot">Wikipedia</a>) A <code>chroot</code> on Unix operating systems is an operation that changes the apparent root directory for the current running process and its children.</p></li>
<li><p>A chroot environment can be used to create and host a separate virtualized copy of the software system. This can be useful for:</p>

<ul>
<li><p><strong>Testing and development</strong></p>

<ul>
<li>A test environment can be set up in the chroot for software that would otherwise be too risky to deploy on a production system.</li>
</ul>
</li>
<li><p><strong>Dependency control</strong></p>

<ul>
<li>Software can be developed, built and tested in a chroot populated only with its expected dependencies. This can prevent some kinds of linkage skew that can result from developers building projects with different sets of program libraries installed.</li>
</ul>
</li>
<li><p><strong>Compatibility</strong></p>

<ul>
<li>Legacy software or software using a different <a href="http://en.wikipedia.org/wiki/Application_binary_interface">application binary interface</a> must sometimes be run in a chroot because their supporting libraries or data files may otherwise clash in name or linkage with those of the host system.</li>
</ul>
</li>
<li><p><strong>Recovery</strong></p>

<ul>
<li>Should a system be rendered unbootable, a chroot can be used to move back into the damaged environment after bootstrapping from an alternate root file system (such as from installation media, or a Live CD).</li>
</ul>
</li>
<li><p><strong>Privilege separation</strong></p>

<ul>
<li>Programs are allowed to carry open file descriptors (for files, pipelines and network connections) into the chroot, which can simplify jail design by making it unnecessary to leave working files inside the chroot directory. This also simplifies the common arrangement of running the potentially vulnerable parts of a privileged program in a sandbox, in order to pre-emptively contain a security breach. Note that chroot is not necessarily enough to contain a process with root privileges.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Cgroups</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Cgroups">Cgroups</a>)is a Linux kernel feature to limit, account, and isolate resource usage (CPU, memory, disk I/O, etc.) of process groups.</li>
<li>Cgroups also provides namespace isolation to completely isolate application&#8217;s view of the operating environment, including process trees, network, user ids and mounted file systems.</li>
</ul>
</li>
<li><p><strong>LXC (LinuX Containers)</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/LXC">LXC</a> provides operating system-level virtualization through a virtual environment that has its own process and network space, instead of creating a full-fledged virtual machine.</li>
<li>The Linux kernel comprises cgroups for resource isolation (CPU, memory, block I/O, network, etc.) that does not require starting any virtual machines.</li>
<li>LXC combines cgroups and namespace support to provide an isolated environment for applications. Docker can also use LXC as one of its execution drivers, enabling image management and providing deployment services.</li>
</ul>
</li>
<li><p><strong>CoreOS</strong></p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/CoreOS">CoreOS</a> is an open source lightweight operating system based on the Linux kernel and designed for providing infrastructure to clustered deployments, while focusing on automation, ease of applications deployment, security, reliability and scalability. As an operating system, CoreOS provides only the minimal functionality required for deploying applications inside software containers, together with built-in mechanisms for service discovery and configuration sharing.</li>
</ul>
</li>
</ul>


<h3>Linking Multiple Apps</h3>

<ul>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing With Logan]]></title>
    <link href="http://www.adamjonas.com/blog/testing-with-logan/"/>
    <updated>2014-07-25T12:37:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/testing-with-logan</id>
    <content type="html"><![CDATA[<h3>Receive Message Chain</h3>

<ul>
<li>In lieu of the depreciated <code>stub_chain</code> there is now <a href="https://github.com/rspec/rspec-mocks/pull/467"><code>receive_message_chain</code></a>.</li>
</ul>


<figure class='code'><figcaption><span>receive_message_chain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">allow</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive_message_chain</span><span class="p">(</span><span class="ss">:foo</span><span class="p">,</span> <span class="ss">:bar</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">double</span><span class="p">)</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">foo</span><span class="o">.</span><span class="n">bar</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:bazz</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="sr">/adfads/</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Yielding multiple variables</h3>

<ul>
<li><code>allow(fake_container).to receive(:attach).and_yield("stdout", "some message\n")</code></li>
</ul>


<h3><code>expect_any_instance_of</code></h3>

<ul>
<li>expect_any_instance_of(Object).to receive(:subscribe) <a href="http://stackoverflow.com/a/17577942/1496757">isn&#8217;t very well documented</a>, but <a href="http://rubydoc.info/gems/rspec-mocks/RSpec/Mocks/ExampleMethods:expect_any_instance_of">it&#8217;s in there</a>.</li>
</ul>


<h3>Testing Sidekiq</h3>

<ul>
<li><a href="https://github.com/mperham">Mike Perham</a> did a nice job documenting the <a href="https://github.com/mperham/sidekiq/wiki/Testing">testing options for workers</a>.

<h3>Detecting pending migrations</h3></li>
<li>A neat little trick to see if there are pending migrations <code>rake db:migrate:status</code>. This must have been built into rails because I see a message every time I haven&#8217;t run a migration and I am running my test suite. It&#8217;s cool nonetheless. <a href="http://stackoverflow.com/questions/1349047/show-pending-migrations-in-rails">Source</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Root Route Takes Parameters]]></title>
    <link href="http://www.adamjonas.com/blog/root-route-takes-parameters/"/>
    <updated>2014-07-16T17:51:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/root-route-takes-parameters</id>
    <content type="html"><![CDATA[<h3>Looking for a hacky way to hard code your root path?</h3>

<p>Look no further: <code>root to: 'controller#action', hello_id: 1, finder_id: 1, laser_id: 1, sharks_id: 4</code> <a href="http://stackoverflow.com/a/22923920/1496757">via</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing Out Faraday]]></title>
    <link href="http://www.adamjonas.com/blog/stubbing-out-faraday/"/>
    <updated>2014-07-15T11:49:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/stubbing-out-faraday</id>
    <content type="html"><![CDATA[<h3>Webmock to disable net connections</h3>

<ul>
<li><a href="https://github.com/bblimke/webmock#real-requests-to-network-can-be-allowed-or-disabled">Just toss it in the <code>spec_helper</code></a>

<ul>
<li><strong><em>Note</em></strong> that I had to use <code>WebMock.disable_net_connect!(:allow_localhost =&gt; true)</code> in the cucumber <code>support/env.rb</code> because my local host wasn&#8217;t being allowed to run on the ci. <a href="https://github.com/bblimke/webmock/issues/284">picked this up from issue #284 on webmocks</a></li>
</ul>
</li>
</ul>


<h3>Rspec Mocks</h3>

<ul>
<li>Can use the <a href="https://github.com/rspec/rspec-mocks#method-stubs">new syntax</a> or mocha.</li>
</ul>


<h3>To stub it out I could either</h3>

<figure class='code'><figcaption><span>These Both Work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow</span><span class="p">(</span><span class="no">MyService</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span> <span class="p">{</span> <span class="n">double</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">before</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">allow_any_instance_of</span><span class="p">(</span><span class="no">MyService</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:publish</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Really cool. The <code>allow_any_instance_of()</code> is pretty sweet to reference an unnamed instance of a class. Pretty sweet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[web sockets versus nginx push state versus action_controller::live]]></title>
    <link href="http://www.adamjonas.com/blog/web-sockets-versus-nginx-push-state-versus-action-controller-live/"/>
    <updated>2014-07-02T17:52:00-04:00</updated>
    <id>http://www.adamjonas.com/blog/web-sockets-versus-nginx-push-state-versus-action-controller-live</id>
    <content type="html"><![CDATA[<h2>The Decision</h2>

<h2>Nginx Push State</h2>

<p>https://gist.github.com/loganhasson/c8bfff2767ea74187cf0</p>

<h2>Enter Heroku</h2>

<p>Clearly keeping a threaded server open with the warning below is not ideal:</p>

<blockquote><p>Long-polling and streaming responses</p></blockquote>

<p>Cedar supports HTTP 1.1 features such as long-polling and streaming responses. An application has an initial 30 second window to respond with a single byte back to the client. However, each byte transmitted thereafter (either received from the client or sent by your application) resets a rolling 55 second window. If no data is sent during the 55 second window, the connection will be terminated.</p>

<p>If you’re sending a streaming response, such as with server-sent events, you’ll need to detect when the client has hung up, and make sure your app server closes the connection promptly. If the server keeps the connection open for 55 seconds without sending any data, you’ll see a request timeout.</p>

<ul>
<li>There are some solutions out there:

<ol>
<li><a href="http://stackoverflow.com/questions/17285961/http-streaming-connection-sse-client-disconnect-not-detected-with-sinatra-thin">Like</a></li>
<li><a href="https://gist.github.com/Funfun/6867167">Or</a></li>
</ol>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
