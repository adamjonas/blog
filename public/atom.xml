<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hack hack hack...]]></title>
  <link href="http://adamjonas.com/atom.xml" rel="self"/>
  <link href="http://adamjonas.com/"/>
  <updated>2016-05-03T10:05:10-04:00</updated>
  <id>http://adamjonas.com/</id>
  <author>
    <name><![CDATA[Adam Jonas]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Peer Mentorship]]></title>
    <link href="http://adamjonas.com/blog/peer-mentorship/"/>
    <updated>2016-05-01T09:55:00-04:00</updated>
    <id>http://adamjonas.com/blog/peer-mentorship</id>
    <content type="html"><![CDATA[<p>Next week I’m going to introduce a new 1 on 1 system on our team. I currently have 8 reports and the other manager on our team has 5. The load of weekly 1 on 1s is quite large if we are truly doing a legitimate check-in. And so, I’d like to try out a system of peer mentorship where peers conduct one on ones with each other for a week to 2 weeks a month. This means we will need to spend time training the team on how to conduct 1 on 1s which I will assume will force us to consider how we currently conduct our 1 on 1s and how they could be better.</p>

<p>Peer mentorship organically already exists on the team. We see natural gravitations along lines of technological specialities and personality types. I’ve done my best to find assignments for these pairs to share a chunk of time working together and I’ve always been impressed with the results. Formalizing this process through this peer mentorship check-in system should further reinforce that natural alliance without forcing devs to be people managers.</p>

<p>We’ll see how this experiment works out, but I’m excited to give it a try. Trusting team members with the task of developing their peers has almost always led to positive results. I expect the same here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My take on maker versus manager]]></title>
    <link href="http://adamjonas.com/blog/my-take-on-maker-versus-manager/"/>
    <updated>2016-04-28T12:01:00-04:00</updated>
    <id>http://adamjonas.com/blog/my-take-on-maker-versus-manager</id>
    <content type="html"><![CDATA[<p>I toed the line for months trying to code a little and be the manager I wanted to be. When the team was at 8 I could find time to block off a morning without meetings or distractions. I could be a hybrid. As we grew to 12 it became untenable. The code I contributed was copy and CSS changes. Barely anything that was worthwhile from a contribution perspective. Letting go was the healthiest thing I could do. I’m not a coder anymore and I admitted that to my team in a frank conversation about imposter syndrome a few weeks ago. I’m a conductor. My job is to make sure the symphony continues to play in harmony. To draw out the sounds and rhythms of my individuals through 1 on 1s, quarterlies and conversations in the hallways.</p>

<p>Being an effective hybrid is possible. We have one. He is a great individual contributor and without fail he does his 1 on 1s and still pushes a ton of code. It works and he is getting the reps he needs to be a future CTO. Taking him off the keyboard would make him miserable and so he’ll toe the line for a while. He has 5 reports and I’m wary to give him more.</p>

<p>I’ve heard coders talk about how bad managers are out of touch because they don’t build anything anymore. I agree, which scares me. Which is why I want to try an experiment. I went on a paternity leave in October for a full month. I totally unplugged and trusted my lieutenants to carry the load. It went fine. No fires. Nobody quit. No month long rabbit holes anyone fell into. There was some maintenance and fine tuning to be done upon my return and some of the project assignments were off, but overall things went well. Meaning that if I disappeared for another month things would likely be fine again. Meaning I could become a dev for a month and let my lieutenants run the show again. I think it would be hard for me to resist my natural inclination to push, nudge and otherwise direct how the team runs, but what might happen if I stop going to all the high level meetings? We’ll find out. I’m going to propose we try it next month.</p>

<p>To be the manager my people deserve for a team of certain size I needed to let go of my drive to code. Sure I can nibble on small projects, but my days of plugging in and zoning out are seemingly over. Hybrids can be of value, but if you are running the show and managing anything larger than a team of 7-8 then you are doing yourself and your team a disservice by trying to focus on anything but your people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computer Science according to Spencer]]></title>
    <link href="http://adamjonas.com/blog/computer-science-according-to-spencer/"/>
    <updated>2016-04-27T13:07:00-04:00</updated>
    <id>http://adamjonas.com/blog/computer-science-according-to-spencer</id>
    <content type="html"><![CDATA[<h2>What is it</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/1062811/difference-between-a-computer-scientist-and-computer-programmer">cs versus programming</a></li>
</ul>


<h2>Big O</h2>

<ul>
<li>used to classify algorithms by changes to the inputs</li>
<li>O(1) - constant time - kilometers to millimeters</li>
<li>O(log n) - opposite of exponential growth, searching binary tree</li>
<li>O(n) - iterating over an array</li>
<li>O(n log n) - good sorting algorithms</li>
<li>O(n<sup>2)</sup> - bubble sort (bad algoritms)</li>
<li>O(2<sup>n)</sup> - the chess board, example doubling something</li>
</ul>


<h2>Exercises</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="mi">1</span><span class="o">.</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">rectangle_area</span><span class="o">(</span><span class="n">height</span><span class="o">,</span> <span class="n">width</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 2*height + 1</span>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 2*height*width + height</span>
</span><span class='line'>        <span class="n">area</span><span class="o">++;</span> <span class="c1">// height*width</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">area</span><span class="o">;</span> <span class="c1">// 1</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">complexity:</span> <span class="mi">3</span><span class="o">*</span><span class="n">height</span><span class="o">*</span><span class="n">width</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">height</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'>  <span class="nl">order:</span> <span class="n">O</span><span class="o">(</span><span class="n">height</span><span class="o">*</span><span class="n">width</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="mi">2</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Constant</span> <span class="n">time</span><span class="o">.</span> <span class="nf">O</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">3</span><span class="o">.</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">halves</span><span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// n</span>
</span><span class='line'>      <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// n</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;)</span> <span class="o">{</span> <span class="c1">// n + n + n</span>
</span><span class='line'>      <span class="n">count</span><span class="o">++;</span> <span class="c1">// n</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">count</span><span class="o">;</span> <span class="c1">// 1</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">Complexity:</span> <span class="mi">6</span><span class="n">n</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">Order</span> <span class="nf">O</span><span class="o">(</span><span class="n">log</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">4</span><span class="o">.</span>
</span><span class='line'>  <span class="kt">int</span> <span class="nf">bacteria_generation</span><span class="o">(</span><span class="n">days</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">total_population</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 1</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">current_population</span> <span class="o">=</span> <span class="n">total_population</span><span class="o">;</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">days</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 1 + days - 1 + days - 1</span>
</span><span class='line'>      <span class="n">current_population</span> <span class="o">=</span> <span class="n">total_population</span><span class="o">;</span> <span class="c1">// days - 1</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">current_population</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">total_population</span><span class="o">++;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">total_population</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nl">Order:</span> <span class="n">O</span><span class="o">(</span><span class="mi">2</span><span class="n">n</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Onboarding]]></title>
    <link href="http://adamjonas.com/blog/onboarding/"/>
    <updated>2016-04-26T10:01:00-04:00</updated>
    <id>http://adamjonas.com/blog/onboarding</id>
    <content type="html"><![CDATA[<p>I’ve read a lot of articles about onboarding, but I’m not sure I come away with anything that actually changes my process. We all know that onboarding is important. Given how many juniors are on our team, it is essential for them to be brought up to speed as quickly as possible so that they have a chance at being productive.</p>

<p>Onboarding starts during the hiring process. This is why compensation negotiation is so tricky. People need to be excited about starting. A difficult negotiation becomes very personal. This is the purpose agents play. They are able to distant their clients for a painful negotiation so that it is less personal.</p>

<p>After the candidate has accepted, if given the opportunity, I really push for the new hire to take a good amount of time off. I refer to these as “bookends” and I believe there should be a good amount of space between her last experience and her new one. A new hire is usually surprised by this, but it sets the tone for a more caring managerial relationship than they have experienced before. The message is clear. You are a hard worker, you deserve a break. We will wait for you. Come when you are ready.</p>

<p>For the purposes of this article, I’m going to focus on junior hires because I think their onboarding process is likely more complicated than their senior counterparts. Juniors need a ton of attention when they arrive. I mean like daily check-ins, scheduled lunches and coffees and firm direction on what code to explore. I start with the <a href="https://github.com/flatiron-labs/wiki/blob/master/ONBOARDING.md">onboarding readme</a> on our team wiki. We also have a <a href="https://github.com/flatiron-labs/wiki/blob/master/DEV_EXPECTATIONS.md">dev expectations readme</a>.</p>

<p>I’ve pushed new hires to improve the docs as they read them with so-so results. The truth of the matter is, they can’t recognize what they need to know until a few weeks in and by they their attention has turned to feature development. Maybe asking them to take another scan after a couple months would be an effective way to improve the system.</p>

<p>The first few 1 on 1s are critical. This is a time to allay fears about imposter syndrome and provide a lot of encouragement upfront. Juniors have never seen a code base as large as ours and they are intimidated. Reminding them it is the exact same, there is just more of it will not be heard the first few times you say it. It will need to be repeated a dozen or so times before it sticks. You belong. We are confident you belong. We wouldn’t have hired you if we weren’t. We don’t make hiring mistake. Whether it is true or not, that’s the message and willl give you the best shot at success.</p>

<p>The first few assignments are also very important and I&#8217;ve learned to not be so cavalier with them. Here are some of my favorites:</p>

<ul>
<li>Specs: There are always things to improve in the test suite and giving the new hire some space to go down a few rabbit holes will familiarize her with how the system works while at the same time immediately adding value.</li>
<li>Refactors: Improving your most incomprehensible code immediately makes the new hire a hero after they can untangle your mess. Again, giving him some space to explore how the system interacts is time well invested.</li>
<li>Small feature win: Shipping something immediately makes everyone feel good. Not only are they able to quickly get a win on the board, but they also can immediately feel the builder’s high and pride of owning a user facing feature.</li>
<li>Pairing: Pairing can be combined in all these scenarios but pairing takes the pressure off of the new hire by making sure they aren’t going it alone. Insisting the new hire to drive anecdotally also seems to increase confidence and ensures she doesn’t become a passive observer.</li>
<li>Onboarding the next noob: Allowing a new hire to onboard the next new hire has been really effective for my team since it proves how much he has learned about the code and our process. While the timing is a key element, I’ve seen confidence levels dramatically shoot up after shepherding a new hire.</li>
</ul>


<p>There isn’t anything all that novel here. I think giving a new hire a lot of attention and making sure they don’t flounder too much is the basic goal (a little flopping around is OK). Even if they are working on a project, allowing for an orientation period takes the pressure off and allows them to explore the code. This is time well spent. For a new junior hire, I’ve made the mistake of putting deadlines around that first project with disastrous results.</p>

<p>Ramping up not only helps a new hire feel productive and competent, it also affects our team dynamic. We need all of our team members to participate in our difficult discussions and if a new hire lacks confidence in their code contributions they also sideline themselves in our team dynamics. Poor onboading is an opportunity lost to build rapport and establish confidence while good onboarding usually leads to individual comfort and immediate buy-in. So while it can be very time intensive, for me it has been worth the investment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quarterlies]]></title>
    <link href="http://adamjonas.com/blog/quarterlies/"/>
    <updated>2016-04-22T11:54:00-04:00</updated>
    <id>http://adamjonas.com/blog/quarterlies</id>
    <content type="html"><![CDATA[<p>Weekly 1 on 1s are not enough. Maybe if I did them better they would be, but mine are all on Fridays and often I’m not able to tease out anything more than the day to day updates and feelings of the past week. That’s not to say that I’m going to stop, 1 on 1s keep me connected to my reports and even if 1 out of every 5 is a breakthrough session then it is time very well spent.</p>

<p>The problem that I see in 1 on 1s as I run them is that it is hard to focus on the longer arching themes on a weekly basis. For whatever reason, it feels awkward to ask about career goals, work fulfillment, etc. with such regularity. Enter the quarterly. I’ve just completed my fourth attempt of quarterlies (not including the annual review). I’m happy with the conversations and the depth of the issues we discuss in those session but my attempt at this didn’t start very well.</p>

<p>Here were the set of questions from the first quarterly survey which I conducted using google forms:</p>

<ul>
<li>How happy are you in labs?</li>
<li>I feel like I&#8217;m growing my skills</li>
<li>I get clear and frequent feedback about my performance?</li>
<li>Given the products we are building, what types of things do you want to work on?</li>
<li>What skills (on or off the keyboard) do you want to improve that you don&#8217;t see an opportunity to do in your current role?</li>
<li>I understand why we are building Learn and the related apps</li>
<li>If you answer that you get it, please summarize why we are putting so much work into Learn.</li>
<li>If you answered you don&#8217;t get it, please tell me what needs further explanation.</li>
<li>Anything else you want to discuss?</li>
<li>What is one thing that would make you happier or more productive?</li>
</ul>


<p>This caused a lot of anxiety. Why am I doing this? What was I going to use this information for? Many of those first conversations were stilted, even confrontational. Someone actually took this time to give his two week notice. It wasn’t pretty. Even so, I was able to battle through these difficult conversations and pull out a lot of agenda topics that we were able to resolve as a group. This made it all worthwhile. Gathering the team in the room to talk about issues that were affecting all of us and re-focus our direction was incredibly fruitful. I also followed up with the individuals that took issue with the set of questions I was asking and had them help me craft a questionnaire that was easier for them to swallow.</p>

<p>Three month later the process went much smoother. Here were the revised questions.</p>

<ul>
<li>I feel like I&#8217;m growing my skills</li>
<li>What is one thing that would make you happier or more productive?</li>
<li>In what ways would you like to grow your skills? What kind of support will you need?</li>
<li>Do you feel like you’re getting enough clear feedback?</li>
<li>How do you feel about the Lab&#8217;s processes in general?</li>
<li>Given the products we are building, what types of things do you want to work on?</li>
<li>I find the work that I do full of meaning and purpose</li>
<li>I am proud of the work that I do for my team</li>
<li>The work that I do is challenging</li>
<li>How would you rate yourself in the following 4 tenets of our “shipping culture” (circle one for each category):</li>
<li>Velocity</li>
<li>Quality</li>
<li>Ownership</li>
<li>Communication</li>
</ul>


<p>This one clicked much better. I got great responses and we had a great team discussion. Processes changed, people were engaged and excited to debate with each other. I was able to present the group with statistics on aggregated stats on how challenged individuals felt and where we needed to improve as a group.</p>

<p>A year later, this is the best thing I think I do as a manager. We ask similar long form answers but have dropped the ratings of the department values in lieu of the company values (see future post on Value Based Assessments). With a young team, it isn’t uncommon for me to see career aspirations change quarter along with engagement and performance. I’ve found these quarterlies to be better discussions than the annual review. Some reasons might be, it isn’t as formal or mired in the connotations of a scary end of year process. I use google forms rather than some HR software, which seems pretty natural and lightweight for devs. I choose a venue that seems more informal but is still off-site (recently I’ve been camping out at Au Bon Pain). And yet, much of this conversation is spent on discussing performance, areas of improvement, how to grow, resetting expectations and ways to improve the team and product &#8211; all the things that I would imagine a good annual review process is supposed to do. This cycle I’ve scheduled 90 minutes for each session but not one actually was completed in time. People are talking for 2 to 2 ½ hour stretches even though it is basically the same set of questions that I’ve used for the last three rounds. This is a huge investment of time. All said and done I will have done more than 30 hours of quarterlies before preparing a deck we can discuss as a group. But this is working and the conversations have improved every quarter.</p>

<p>Even with its rocky start, quarterlies have served us well. I would have never known many of the team’s process pain points without these conversations and it has saved me when performance slips so that I can get on the record to address it quickly. If annual reviews are broken my first guess would be that even if they are conducted well, they are just too infrequent. Things on my team move too quickly to address on a 12-month cycle. This is my best shot at making it better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When I didn't see it in the interview]]></title>
    <link href="http://adamjonas.com/blog/when-i-didnt-see-it-in-the-interview/"/>
    <updated>2016-04-15T11:46:00-04:00</updated>
    <id>http://adamjonas.com/blog/when-i-didnt-see-it-in-the-interview</id>
    <content type="html"><![CDATA[<p>Raw intellect isn’t enough. Just like product market fit we need to see person-job fit. How can we test it? Good people with drive and patience for change and a healthy sense of duty seem to be able to adjust to nearly any job for a short period. We can all do any job for six months and knock it out of the park.</p>

<p>I think about a particular interview where I left so excited about the candidate. They were quirky, but thoughtfully engaged. They grasped what we did here and why it was important. They thirsted for new knowledge and challenge. They were young and ambitious. No work experience of any kind.</p>

<p>But when he arrived it was an utter let down. The focus wasn’t on getting as good as possible as quickly as possible but rather maintaining balance at all times. Never pushing himself to be in the trenches with his brethren in times as the pressure bore down on them or let the passion take him deep into the night when we feel the torment of an unfinished idea demanding completion.</p>

<p>All the raw materials were there. What did I miss? If we hire someone with no work history, does the onboarding process need to be different? Do we need to teach them not only how to do the job but also how to be an employee? What expectations did we set to encourage him to rise to be great?</p>

<p>I cannot move past my disappointment. I signed off on him. I had high expectations. Though not my direct report, I provided course corrections. As time continues to march on the disappointment builds. I notice the small improvements but never the grand about-face for which I hold out hope. That one day when he will wake up, open his eyes to observe and finally be dissatisfied with his mediocrity.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optical Distortion, Inc. HBS Case Study]]></title>
    <link href="http://adamjonas.com/blog/optical-distortion-inc-hbs-case-study/"/>
    <updated>2016-04-13T16:02:00-04:00</updated>
    <id>http://adamjonas.com/blog/optical-distortion-inc-hbs-case-study</id>
    <content type="html"><![CDATA[<h2>ODI Discussion/Analysis Questions</h2>

<p>1)</p>

<ul>
<li>What characteristics of the ODI lens are likely to make it appealing/unappealing to farmers?

<ul>
<li><p>Appealing</p>

<ul>
<li>debeaking causes problems of their own in terms of the trauma it causes hurts short term production (for a full week, only 1 egg lost by 5 months) and in the long term in feed is wasted. Debeaking is not an exact science but reduced cannibalism to 9% from 25%.</li>
<li>for $2.50/hour could debeak approximately 220 birds per hour.</li>
<li>actually modifies behavior as opposed to reducing the weapon. Reduces cannibalsim to 4.5% (1/2 of debeaking)

<ul>
<li>225 birds an hour to put in lense</li>
</ul>
</li>
<li>reduces feed costs from 24.46 pounds to 23.68 lbs per 100 birds

<ul>
<li>20,000 bird flock could save 156 pounds of feed per day ($12.324/day)</li>
<li>$158 per ton - $.079/lbs</li>
</ul>
</li>
</ul>
</li>
<li><p>unappealing</p>

<ul>
<li>more upfront cost</li>
<li>can cause eye infection/fall out of place</li>
<li>change from current practice.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>2)</p>

<ul>
<li>What is the value to famers of lenses over debeaking? Can you quantify it? (Hint: Think about savings from cannibalization, egg reduction, feed, and labor)

<ul>
<li>$.00073 a bird for the debeaking process (which would be unneccessary).</li>
<li>$.22 per bird feed savings over a hen&#8217;s lifetime</li>
<li>$.108 in reduction in replacement cost of of $.21 since lenses reduces cannibolism by 1/2.</li>
<li><p>$.224 of added production in egg production. Hen lays 22 dozen eggs a year. If they lose a week of production from debeaking that is .423 dozen a week (which is 5 eggs a week) and if you assume that is $.53 a dozen that is $.224 cents of lost egg production per bird.</p></li>
<li><p>adds up to ~$.33 in added value per bird over their lifetime -> for large farms (50,000 birds) that $17,500 in added revenue a year (though it is annual cashflow of $12 million). For a small farm (10k) is it $3,500.</p></li>
</ul>
</li>
</ul>


<p>3)</p>

<ul>
<li>What Pricing policy should ODI adopt and why? What is the savings per bird for farmers at these prices?

<ul>
<li>need market acceptance</li>
<li><p>somewhere around $.35 per bird in added value, which would easily cover the $.07 price increase.</p></li>
<li><p>Skimming Price</p>

<ul>
<li>For products that represent a drastic departure from accepted ways of performing a service, a policy of relatively high prices coupled with heavy promotional expenditures in the early stages of market development (and lower prices at later stages) has proved successful for many products.</li>
</ul>
</li>
<li>Penetration pricing

<ul>
<li>This policy is the reverse of the skimming policy in which the price is lowered only as short-run competition forces it.</li>
</ul>
</li>
</ul>


<p><a href="https://hbr.org/1976/11/pricing-policies-for-new-products">Pricibg Strategies</a></p></li>
</ul>


<p>4)</p>

<ul>
<li>Can ODI turn a profit at these prices?

<ul>
<li>sell at $0.08 per pair</li>
<li>cost $0.032 per pair + 12k (for first 15 million pairs)</li>
<li>cost $592,000 to operate</li>
<li>.048 per pair  in profit</li>
<li>592,000 / .048 = 12,333,333 lens to break even meaning they need .1% market penetration.</li>
</ul>
</li>
</ul>


<p>5)</p>

<ul>
<li>How would you focus ODI&#8217;s marketing efforts? How would you segment the
customer base?

<ul>
<li>345 farms have 20% of america&#8217;s chickens. If they closed 4 of those farms they would be able to able to turn an operating profit.

<ul>
<li>crowded farms would benefit most from this change and the sales process would be easiest.</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passion without Anger]]></title>
    <link href="http://adamjonas.com/blog/investing-without-the-anger/"/>
    <updated>2016-04-01T12:45:00-04:00</updated>
    <id>http://adamjonas.com/blog/investing-without-the-anger</id>
    <content type="html"><![CDATA[<p>I am fiery. That&#8217;s euphemistic for being a little man with a short fuse. I&#8217;ve never been the type that can fall asleep in the middle of a movie. If I&#8217;m into it then I&#8217;m into it. I&#8217;m intense. And boy, do I love what I do. I like being a multiplier. My coding skills are middling at best. I wouldn&#8217;t hire me for my team. Not enough raw talent. I like that I can impact the lives of the people on my team on a daily basis. That I can keep them motivated, engaged, fulfilled and happy. I feel like a mechanic that tunes highly customized and specialized machines. I once interviewed with the Yankees as a sports psychologist. Years later I feel like I have a similar, but better job. All that is to say, I take my responsibility to my people very seriously.</p>

<p>My team is filled with a bunch of beginners. More than half of our 12 person team has less than a year of professional coding experience. Everyday I’m humbled by how much they can get done. How fast they develop their skills. Their grit. How they rise to the challenges set in front of them. They find a way time after time.</p>

<p>And so, it is in this setting that I hurt so deeply when others don&#8217;t do their part. I get upset. I&#8217;ve always been impatient by nature. I have extremely (maybe unreasonably) high expectations of others. Given I don&#8217;t often feel that way about my reports, does this mean these emotions are only surfaced when I&#8217;m not in control? Is it trust? What are the limiting factors that enable me to be this understanding, mature, best version of myself?</p>

<p>When someone wrongs me or my people, my blood boils. I can feel my face flush. My chest constricts and breathing shallows. I hope it doesn’t look as bad as it feels, but I&#8217;m sure it must. Superiors, peers, low level employees. I&#8217;m indiscriminate. Forgiveness and empathy exit likely along with a balanced perspective and moderation. When it’s my engineers or a fellow soldier I fight alongside in the trenches, I can see how their misses happened. I can guide them to a better path. A screw up from others is a different story. It triggers a frustration and if done repeatedly, a resentment. How can they hold up their end of the bargain? Do they just not care? My frustration has more than once been interpreted as anger, which is about a worst case scenario. A short angry man in a director role in charge of a 12 person engineering team. How more cliche could I be?</p>

<p>What isn’t clear to me is how I can extend the patience and understanding to others? Empathy, compassion, calmness. I can clearly sort out the problems of my people. Advise them on clear steps forward. And it isn’t like I don’t understand the perspectives of non-technical folks. I’ve only been doing this for three years.</p>

<p>I recently heard that meditation can cause you to change your perspective to see problem situations as less catastrophic events. I think that would be very healthy for me. I tend to obsess on the problems. It tortures me in my sleep. Lack of sleep then alters my mood. Day to day, I shut down around “problem people.” I don’t act myself. I am quiet and withdrawn. This can’t make it better.</p>

<p>So the way forward has to begin with an altered perspective. Working to see the world in a more balanced way. I still want to let my love for what I do bleed through. I think it is my most valuable asset and I believe I have been rewarded for it. But wild swings of mood has never been in high demand and so my path forward is to find a way to take a calm breath and recalibrate when presented with these moments in the future. Maybe it is better self control or maybe given that I keep referring to them as “my people” I can expand who I count in that circle. What I do know is that writing about this early in the morning feeling centered is easy enough. But the real challenge begins as I attempt to self-correct next time the rubber hits the road.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java basics]]></title>
    <link href="http://adamjonas.com/blog/java-basics/"/>
    <updated>2016-03-23T13:49:00-04:00</updated>
    <id>http://adamjonas.com/blog/java-basics</id>
    <content type="html"><![CDATA[<h2>Some basics</h2>

<ul>
<li>Here&#8217;s a basic method signature <code>public static void main(String args[])</code></li>
<li>The void keyword allows us to create methods which do not return a value. Otherwise in java you need to specific what type the return value must be.</li>
<li><p><code>public</code> is a Java keyword which declares a member&#8217;s access as public. Public members are visible to all other classes. This means that any other class can access a public field or method. Further, other classes can modify public fields unless the field is declared as final.</p>

<ul>
<li>A best practice is to give fields <code>private</code> access and reserve <code>public</code> access to only the set of methods and <code>final</code> fields that define the class&#8217; public constants. This helps with encapsulation and information hiding, since it allows you to change the implementation of a class without affecting the consumers who use only the public API of the class.</li>
</ul>
</li>
<li><p>In Java, you need to have a method named <code>main()</code> in at least one class. This method must appear within a class, but it can be any class.</p></li>
<li><p>ints don&#8217;t evaluate to <code>true</code></p></li>
</ul>


<h2><a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html">interfaces</a></h2>

<ul>
<li>An interface declaration consists of modifiers, the keyword interface, the interface name, a comma-separated list of parent interfaces (if any), and the interface body.</li>
<li><a href="https://en.wikipedia.org/wiki/Interface-based_programming">Interface programming</a> is an architectural pattern for implementing modular programming at the component level in an object-oriented programming language which does not have a module system.</li>
<li><p>Implementing an interface allows a class to become more formal about the behavior it promises to provide. Interfaces form a contract between the class and the outside world, and this contract is enforced at build time by the compiler. If your class claims to implement an interface, all methods defined by that interface must appear in its source code before the class will successfully compile.</p></li>
<li><p><strong>inheritance</strong></p>

<ul>
<li>A java class cannot extend more than one class at a time so it won&#8217;t provide support for multiple inheritance in classes, but it can extend more than one interface at a time so we java can support multiple inheritances with regard to interfaces.</li>
</ul>
</li>
</ul>


<h2>HAS-A relationship</h2>

<ul>
<li>HAS-A means an instance of one class &#8220;has a&#8221; reference to an instance of another class or another instance of same class.</li>
<li>It is also known as &#8220;composition&#8221; or &#8220;aggregation&#8221;.</li>
<li>There is no specific keyword to implement HAS-A relationship but mostly we are depended upon &#8220;new&#8221; keyword.</li>
<li>Composition:

<ul>
<li>Without existence of container object, if there is no chance of existence of contained objects then container and contained objects are said to be strongly associated and this strong association is known as composition.</li>
<li>Eg: A &#8220;university&#8221; has several &#8220;departments&#8221;. Without existence of &#8220;university&#8221; there is no chance for the &#8220;departments&#8221; to exist. Hence &#8220;university&#8221; and &#8220;departments&#8221; are strongly associated and this strong association is known as composition.</li>
</ul>
</li>
</ul>


<h2>IS-A Relationship:</h2>

<ul>
<li>This refers to inheritance or implementation.</li>
<li>Expressed using keyword &#8220;extends&#8221;.</li>
<li>Main advantage is code reusability.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four - Observer and Mediator Pattern]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-observer-and-mediator-pattern/"/>
    <updated>2016-03-16T13:32:00-04:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-observer-and-mediator-pattern</id>
    <content type="html"><![CDATA[<h2>Observer</h2>

<ul>
<li>subject is a logical place to keep track of the collection of the observers

<ul>
<li>the upside is the observers needing to check with the subject via something like long-polling versus the subject notifying the owners</li>
</ul>
</li>
<li>ActiveRecord before_actions and after_actions are a ruby implementation of the observer pattern</li>
<li>How does JS does this?

<ul>
<li>functions are first class object, easy to pass around</li>
</ul>
</li>
</ul>


<h2>Mediator</h2>

<ul>
<li>what&#8217;s the difference between mediator and observer

<ul>
<li>Define an object that encapsulates how a set of objects interact.</li>
<li>Mediator is a little more specific, it avoids having classes communicate directly but instead through a mediator. This helps the Single Responsibility principle by allowing communication to be offloaded to a class that just handles that.</li>
</ul>
</li>
<li>replaces many to many interactions with one to many interactions.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react]]></title>
    <link href="http://adamjonas.com/blog/react/"/>
    <updated>2016-03-10T14:43:00-05:00</updated>
    <id>http://adamjonas.com/blog/react</id>
    <content type="html"><![CDATA[<h2>What is it?</h2>

<ul>
<li>beefed up view layer</li>
<li>one way data binding -> if state changes the view changes</li>
<li>creates a virtual DOM</li>
<li>doesn&#8217;t provide any data management systems like backbone, Alt.js, Redux</li>
<li>no ajax, use JQuery</li>
<li>no routing capabilities</li>
<li>does not work well with JQuery DOM manipulation</li>
<li>can re-render a lot because of the virtual DOM manipulation</li>
</ul>


<h2>Setup</h2>

<ul>
<li>Babel</li>
<li>Gulp - task runner like rake</li>
<li>Webpack - processes through Babel interpreter and make it useable code</li>
</ul>


<h2>Quirks</h2>

<ul>
<li>class becomes className since it is a reserved word</li>
<li>typeSetting</li>
</ul>


<h2>Going forwards</h2>

<ul>
<li>flux

<ul>
<li>alt.js</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Proxy and adapter pattern]]></title>
    <link href="http://adamjonas.com/blog/proxy-and-adapter-pattern/"/>
    <updated>2016-03-09T13:10:00-05:00</updated>
    <id>http://adamjonas.com/blog/proxy-and-adapter-pattern</id>
    <content type="html"><![CDATA[<h2>Proxy</h2>

<ul>
<li>reverse proxies</li>
<li>virtual proxy: creates expensive objects on demand. the worker box maybe?

<ul>
<li>infinite scroll or pagination (these objects exist in Octokit, where there are objects as placeholders but it hasn&#8217;t acutally fetched the data)</li>
<li>memoization example in the ruby boook</li>
<li><a href="http://edgeapi.rubyonrails.org/classes/ActiveRecord/Associations/CollectionProxy.html">collection proxy</a></li>
</ul>
</li>
</ul>


<h2>Adapter (aka wrapper)</h2>

<ul>
<li>Fog: cloud storage</li>
<li>ActiveRecord</li>
<li>OctokitWrapper is more of a decorator because it adds additional implementation on top of Octokit</li>
<li>Gateway pattern is an adapter specifically created to talk to external services</li>
<li>HierarchyBuilder is the adapter</li>
<li>The key difference between bridge and apater lies in their intents.

<ul>
<li>Adapter focuses on resolving incompatibilities between two existing interfaces. Bridge, on the other hand, bridges an abstraction and its (potentially numerous) implementations.</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Builder pattern and Singletons]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-builder-pattern-and-singletons/"/>
    <updated>2016-03-02T12:07:00-05:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-builder-pattern-and-singletons</id>
    <content type="html"><![CDATA[<h2>Builder</h2>

<ul>
<li>Concrete builders: <code>html to markdown</code> and <code>html to json</code>?</li>
<li>Could we think of a complex cart like this? Like line items of a educational program might compose a composite object by the cart which is the director.

<ul>
<li>doesn&#8217;t quite match up with subbing in different builders</li>
</ul>
</li>
<li>like strategy pattern, but the way it differs is that it creates a composite object at the end</li>
<li>but this book is more about the abstract factory, the way this differs is that it the director gives you finer control of the order.</li>
<li><p>separating out <strong>how</strong> the object is built</p></li>
<li><p>e.g. Creating enrollments with one time purchases vs recurring subscriptions</p>

<ul>
<li>client == browser</li>
<li>director == model ShoppingCart</li>
<li>builder1 == JobGuaranteeSubscription</li>
<li>builder2 == NonJobGuaranteeSubscription</li>
<li><p>result == subscription</p></li>
<li><p>Build part: slack group, google group, batch</p></li>
</ul>
</li>
</ul>


<h2>Singleton</h2>

<ul>
<li>there is only one instance and so if another part of the code changes it, then you will have shot yourself in the foot</li>
<li>publishers, which are all singletons, don&#8217;t need more than one, but they could have been classes instead</li>
<li>dependency injection makes tests way easier</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four: Decorator and Composition]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-decorator-and-composition/"/>
    <updated>2016-02-17T13:56:00-05:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-decorator-and-composition</id>
    <content type="html"><![CDATA[<h2>Decorator</h2>

<ul>
<li>OOCSS -> does that fit the pattern?</li>
<li>&#8220;Changing the skin of an object versus changing its guts&#8221;</li>
</ul>


<h2>Composite</h2>

<ul>
<li>componenet: parent node</li>
<li>composite: has children</li>
<li>leaf: has no children</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gang of Four Chap 1]]></title>
    <link href="http://adamjonas.com/blog/gang-of-four-chap-1/"/>
    <updated>2016-02-03T13:41:00-05:00</updated>
    <id>http://adamjonas.com/blog/gang-of-four-chap-1</id>
    <content type="html"><![CDATA[<h2>Polymorphism vs duck typing</h2>

<ul>
<li>from the gospel of <a href="http://stackoverflow.com/a/11502482/1496757">stackoverflow</a> and <a href="http://programmers.stackexchange.com/a/121781">stackexchange</a> and a <a href="https://gist.github.com/46bit/4366791">gist</a></li>
</ul>


<p>  ### Polymorphism</p>

<pre><code>- often hear in the context of subclasses
</code></pre>

<p>  ### Duck typing</p>

<pre><code>- usually hear in the context of mixins
- an interface that can interact without having to know what that object is
</code></pre>

<ul>
<li>class inheritance versus interface inheritance</li>
</ul>


<h2>Composition vs class inheritance</h2>

<ul>
<li>Rule of thumb: when behavior spans classes use composition and when limited to derivations of classes then use subclassing</li>
<li></li>
</ul>


<h2>Run time versus compile time</h2>

<h2>Program to an interface not an implementation</h2>

<ul>
<li>interface is the behavior</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Pointers]]></title>
    <link href="http://adamjonas.com/blog/memory-pointers/"/>
    <updated>2016-01-28T13:54:00-05:00</updated>
    <id>http://adamjonas.com/blog/memory-pointers</id>
    <content type="html"><![CDATA[<h3>Random notes from code reading</h3>

<ul>
<li><p>with 64-bit pointers</p></li>
<li><p>poro -> an array, for example, is made multiple times. One with items
of the array, again for indexes of the array, etc.</p></li>
<li><p>memory swap -> linked lists</p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Red%E2%80%93black_tree">red-black tree</a></p></li>
<li><p><a href="https://en.wikipedia.org/wiki/Sparse_array">sparse array</a></p></li>
<li><p>program restart re-allocates the memory</p></li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of User Experience]]></title>
    <link href="http://adamjonas.com/blog/the-elements-of-user-experience/"/>
    <updated>2016-01-19T17:08:00-05:00</updated>
    <id>http://adamjonas.com/blog/the-elements-of-user-experience</id>
    <content type="html"><![CDATA[<p>The Five Planes:</p>

<ol>
<li>The Surface Plane</li>
<li><p>Sensory Design</p></li>
<li><p>The Skeleton Plane</p></li>
<li><p>Interface Design, Navigation Design, and Information Design</p></li>
<li><p>The Structure Plane</p></li>
<li><p>Interaction Design and Information Architecture</p></li>
<li><p>The Scope Plane</p></li>
<li><p>Functional Specifications and Content Requirements</p></li>
<li><p>The Strategy Plane</p></li>
<li>Product Objectives and User Needs</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cantilever tricks]]></title>
    <link href="http://adamjonas.com/blog/cantilever-tricks/"/>
    <updated>2016-01-13T15:45:00-05:00</updated>
    <id>http://adamjonas.com/blog/cantilever-tricks</id>
    <content type="html"><![CDATA[<ul>
<li><p><code>@extend</code> means that the element just get a comment where the extended
class was previously.</p></li>
<li><p>inline svg styling is preferred &#8211; think of it like an iframe.</p></li>
<li><p>gradients are crazy powerful: You can specify that the white area at the bottom starts at 50% from the bottom as specified here &#8211; <code>background: linear-gradient(to bottom, rgba(255,255,255,0), rgba(255,255,255,0.8) 50%, rgba(255,255,255,1) );</code>. And you can repeat it to make like a rainbow effect. Really cool.</p></li>
<li><p><a href="https://www.smashingmagazine.com/2012/12/css-baseline-the-good-the-bad-and-the-ugly/">baseline alignment</a></p></li>
</ul>


<h2>SVGs</h2>

<ul>
<li><a href="https://css-tricks.com/svg-use-with-external-reference-take-2/">Chris Coyer&#8217;s SVG use external references</a></li>
<li><a href="https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/">svg sprite creation techniques</a></li>
</ul>


<h2>OOCSS</h2>

<ul>
<li><a href="http://www.stubbornella.org/content/">Nicole Sullivan</a></li>
</ul>


<h2>Floating</h2>

<ul>
<li>if things are longer than expected -> it will overflow with
abosolutely positioned</li>
<li>more predictable behavior for overflow</li>
</ul>


<h2>border box</h2>

<ul>
<li><a href="http://www.w3schools.com/cssref/css3_pr_box-sizing.asp"><code>box-sizing: border-box</code></a> includes padding but not margin in the width
measurements.</li>
</ul>


<h2>whitespace</h2>

<ul>
<li><code>nowrap</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS restyle]]></title>
    <link href="http://adamjonas.com/blog/css-restyle/"/>
    <updated>2016-01-05T10:13:00-05:00</updated>
    <id>http://adamjonas.com/blog/css-restyle</id>
    <content type="html"><![CDATA[<p>#</p>

<h2>Block, Element, Modifier (BEM)</h2>

<ul>
<li><p><a href="https://en.bem.info/">site</a></p></li>
<li><p>containers and objects are more modular</p></li>
<li><p>layouts aren&#8217;t reused</p></li>
<li><p>clearfix issue</p>

<ul>
<li>using psuedo element hack</li>
</ul>
</li>
<li><p>media element</p>

<ul>
<li>object in css methodology</li>
</ul>
</li>
<li><p>containers</p>

<ul>
<li><p>an element that can contain other things -> more container-ish</p>

<ul>
<li>doesn&#8217;t usually contain other elements</li>
</ul>
</li>
<li><p>any decendents are named-spaced of the parent</p>

<ul>
<li>e.g. <code>.sample-object</code> and <code>.sample-object__child</code></li>
<li>child is indicated by double underscore</li>
<li>you should expect to see similar classes up the DOM

<ul>
<li>e.g. <code>&lt;div class='level'&gt;&lt;div
class='level__inner'&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>options

<ul>
<li><code>&lt;div style-color='red'&gt;</code></li>
<li><code>&lt;dic data-count='16'&gt;</code></li>
</ul>
</li>
<li>extensions

<ul>
<li>modifiers have double dash</li>
<li>you should expect to see similar class within the same div

<ul>
<li>e.g. <code>&lt;div class='module module--island module--island--cap'&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>modules

<ul>
<li>usually have a head/body/footer</li>
<li>provides margin around it, background and borders</li>
</ul>
</li>
</ul>
</li>
<li><p>object</p>

<ul>
<li>an element that doesn&#8217;t contain other elements as opposed to
objects which are more like containers</li>
<li>built to fill the width they are in, without explicit width</li>
<li>maybe a place where <code>!important</code> can live given that other
elements won&#8217;t live within it.</li>
<li>expect more legos than objects</li>
</ul>
</li>
<li><p>levels</p>

<ul>
<li>makes vertical organization of the grids</li>
<li>they stack on top of eachother - levels of a building</li>
<li>centers a container in a strip that goes across the page</li>
</ul>
</li>
<li><p>utility class</p>

<ul>
<li>namespaced with url

<ul>
<li>with margin on the bottom</li>
<li><code>utl__m--bxl</code> => utility, margin, bottom extra large</li>
</ul>
</li>
</ul>
</li>
</ul>


<p> ## ?
  - how is this going to work with vendors (like icons)
  - vertical height for grid</p>

<ul>
<li>user bar is a layout

<ul>
<li>list horizontal</li>
</ul>
</li>
<li>level for bubble bar</li>
<li>remove rows and cols from markdown to json parser</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tcp, udp, http]]></title>
    <link href="http://adamjonas.com/blog/tcp-udp-http/"/>
    <updated>2015-12-29T17:00:00-05:00</updated>
    <id>http://adamjonas.com/blog/tcp-udp-http</id>
    <content type="html"><![CDATA[<p>I really had no idea between TCP and UDP.</p>

<p><a href="http://www.diffen.com/difference/TCP_vs_UDP">This did a nice comparsion</a>:
Transmission Control Protocol ensures a reliable and ordered delivery of a stream of bytes from user to server or vice versa. User Datagram Protocol is not dedicated to end to end connections and communication does not check readiness of receiver.</p>

<ul>
<li>HTTP uses TCP connection. But HTTP uses only one TCP connection.</li>
<li>Use persistent plain TCP sockets if both client and server independently send packets but an occasional delay is OK (e.g. Online Poker, many MMOs).</li>
<li>Use UDP if both client and server may independently send packets and occasional lag is not OK (e.g. Most multiplayer action games, some MMOs).</li>
</ul>


<p>And <a href="https://www.reddit.com/r/ProgrammerHumor/comments/14wv9p/i_was_gonna_tell_you_guys_a_joke_about_udp/">there is always this</a></p>
]]></content>
  </entry>
  
</feed>
